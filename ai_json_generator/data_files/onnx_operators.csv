operator_name,versions,description,input_name,input_type,input_description,output_name,output_type,output_description,attribute_name,attribute_type,attribute_description,npu_unit
Abs,"13, 1, 6","Absolute takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where absolute value, y = abs(x), is applied to   the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,,,,vector
Acos,"22, 7","Calculates the arccosine (inverse of cosine) of the given input tensor, element-wise.",input,T,Input tensor,output,T,The arccosine of the input tensor computed element-wise,,,,unknown
Acosh,"22, 9",Calculates the hyperbolic arccosine of the given input tensor element-wise.,input,T,Input tensor,output,T,The hyperbolic arccosine values of the input tensor computed element-wise,,,,unknown
Add,"14, 1, 6, 7, 13","Performs element-wise binary addition (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).   (Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.","A,B","T,T",First operand.;Second operand.,C,T,"Result, has same element type as two inputs",,,,vector
AffineGrid,20,"Generates a 2D or 3D flow field (sampling grid), given a batch of affine matrices theta   (https://pytorch.org/docs/stable/generated/torch.nn.functional.affine_grid.html).   An affine matrix `theta` is applied to a position tensor represented in its homogeneous expression. Here is an example in 3D:   ```   [r00, r01, r02, t0]   [x]   [x']   [r10, r11, r12, t1] * [y] = [y']   [r20, r21, r22, t2]   [z]   [z']   [0,   0,   0,   1 ]   [1]   [1 ]   ```   where `(x, y, z)` is the position in the original space, `(x', y', z')` is the position in the output space.   The last row is always `[0, 0, 0, 1]` and is not stored in the affine matrix. Therefore we have `theta` of shape `(N, 2, 3)` for 2D or `(N, 3, 4)` for 3D.   Input `size` is used to define grid of positions evenly spaced in the original 2D or 3D space, with dimensions ranging from `-1` to `1`.   The output `grid` contains positions in the output space.   When `align_corners=1`, consider `-1` and `1` to refer to the centers of the corner pixels (mark `v` in illustration).   ```   v            v            v            v   |-------------------|------------------|   -1                  0                  1   ```   When `align_corners=0`, consider `-1` and `1` to refer to the outer edge of the corner pixels.   ```       v        v         v         v   |------------------|-------------------|   -1                 0                   1   ```","theta,size","T1,T2","input batch of affine matrices with shape (N, 2, 3) for 2D or (N, 3, 4) for 3D;the target output image size (N, C, H, W) for 2D or (N, C, D, H, W) for 3D",grid,T1,"output tensor of shape (N, H, W, 2) of 2D sample coordinates or (N, D, H, W, 3) of 3D sample coordinates.",align_corners,int (default is 0),"if align_corners=1, consider -1 and 1 to refer to the centers of the corner pixels. if align_corners=0, consider -1 and 1 to refer to the outer edge the corner pixels.",unknown
And,"7, 1","Returns the tensor resulted from performing the `and` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,vector
ArgMax,"13, 1, 11, 12","Computes the indices of the max elements of the input tensor's element along the   provided axis. The resulting tensor has the same rank as the input if keepdims equals 1.   If keepdims equals 0, then the resulting tensor has the reduced dimension pruned.   If select_last_index is True (default False), the index of the last occurrence of the max   is selected if the max appears more than once in the input. Otherwise the index of the   first occurrence is selected.   The type of the output tensor is integer.",data,T,An input tensor.,reduced,tensor(int64),Reduced output tensor with integer data type.,"axis,keepdims,select_last_index","int (default is 0),int (default is 1),int (default is 0)","The axis in which to compute the arg indices. Accepted range is [-r, r-1] where r = rank(data).;Keep the reduced dimension or not, default 1 means keep reduced dimension.;Whether to select the last index or the first index if the {name} appears in multiple indices, default is False (first index).",unknown
ArgMin,"13, 1, 11, 12","Computes the indices of the min elements of the input tensor's element along the   provided axis. The resulting tensor has the same rank as the input if keepdims equals 1.   If keepdims equals 0, then the resulting tensor has the reduced dimension pruned.   If select_last_index is True (default False), the index of the last occurrence of the min   is selected if the min appears more than once in the input. Otherwise the index of the   first occurrence is selected.   The type of the output tensor is integer.",data,T,An input tensor.,reduced,tensor(int64),Reduced output tensor with integer data type.,"axis,keepdims,select_last_index","int (default is 0),int (default is 1),int (default is 0)","The axis in which to compute the arg indices. Accepted range is [-r, r-1] where r = rank(data).;Keep the reduced dimension or not, default 1 means keep reduced dimension.;Whether to select the last index or the first index if the {name} appears in multiple indices, default is False (first index).",unknown
Asin,"22, 7","Calculates the arcsine (inverse of sine) of the given input tensor, element-wise.",input,T,Input tensor,output,T,The arcsine of the input tensor computed element-wise,,,,unknown
Asinh,"22, 9",Calculates the hyperbolic arcsine of the given input tensor element-wise.,input,T,Input tensor,output,T,The hyperbolic arcsine values of the input tensor computed element-wise,,,,unknown
Atan,"22, 7","Calculates the arctangent (inverse of tangent) of the given input tensor, element-wise.",input,T,Input tensor,output,T,The arctangent of the input tensor computed element-wise,,,,unknown
Atanh,"22, 9",Calculates the hyperbolic arctangent of the given input tensor element-wise.,input,T,Input tensor,output,T,The hyperbolic arctangent values of the input tensor computed element-wise,,,,unknown
Attention,23,"Computes scaled dot product attention on query, key and value tensors, using an optional attention mask if passed.   This operator covers self and cross variants of the attention operation based on sequence lengths of K, Q and V.   For self attention, `kv_sequence_length` equals to `q_sequence_length`.   For cross attention, query and key might have different lengths.   This operator also covers the 3 following variants based on the number of heads:   1) Multi-headed Attention (MHA): Described in the paper https://arxiv.org/pdf/1706.03762, `q_num_heads = kv_num_heads`.   2) Group-query Attention (GQA): Described in the paper https://arxiv.org/pdf/2305.13245, `q_num_heads > kv_num_heads`, `q_num_heads % kv_num_heads == 0`.   3) Multi-query Attention (MQA): Described in the paper https://arxiv.org/pdf/1911.02150, `q_num_heads > kv_num_heads`, `kv_num_heads=1`.   Attention bias to be added is calculated based on `attn_mask` input and `is_causal attribute`, only one of which can be provided.   1) If `is_causal` is set to `1`, the attention masking is a lower triangular matrix when the mask is a square matrix. The attention masking has the form of the upper left causal bias due to the alignment.   2) `attn_mask`: A boolean mask where a value of `True` indicates that the element should take part in attention or a float mask of the same type as query, key, value that is added to the attention score.   Both past and present state key/values are optional. They shall be used together, and not allowed to use only one of them.   The following pattern is applied to the Q, K and V inputs after appropriate reshaping of K and V inputs based on sequence lengths and num heads provided:   ```     The following pattern is applied by this operator:         Q          K          V         |          |          |        Q*scale     K*scale    |         |          |          |         |       Transpose     |         |          |          |         ---MatMul---          |               |               |    at_mask---Add              |               |               |     softcap (if provided)     |               |               |            Softmax            |               |               |               -----MatMul------                      |                      Y   ```","Q,K,V,attn_mask,past_key,past_value","T1,T1,T2,U,T1,T2","Query tensor. 4D tensor with shape `(batch_size, q_num_heads, q_sequence_length, head_size)` or 3D tensor with shape `(batch_size, q_sequence_length, q_hidden_size)`. For cases with a 3D input tensor, `q_hidden_size = q_num_heads * head_size`;Key tensor. 4D tensor with shape `(batch_size, kv_num_heads, kv_sequence_length, head_size)` or 3D tensor with shape `(batch_size, kv_sequence_length, k_hidden_size)`. For cases with a 3D input tensor, `k_hidden_size = kv_num_heads * head_size`;Value tensor. 4D tensor with shape `(batch_size, kv_num_heads, kv_sequence_length, v_head_size)` or 3D tensor with shape `(batch_size, kv_sequence_length, v_hidden_size)`. For cases with a 3D input tensor, `v_hidden_size = kv_num_heads * v_head_size`;Attention mask. Shape must be broadcastable to 4D tensor with shape `(batch_size, q_num_heads, q_sequence_length, total_sequence_length)` where `total_sequence_length = past_sequence_length + kv_sequence_length.` Two types of masks are supported. A boolean mask where a value of `True` indicates that the element should take part in attention. Also supports a float mask of the same type as query, key, value that is added to the attention score.;past state cache for key with shape `(batch_size, kv_num_heads, past_sequence_length, head_size)`;past state cache for value with shape `(batch_size, kv_num_heads, past_sequence_length, v_head_size)`","Y,present_key,present_value,qk_matmul_output","T1,T1,T2,T1","The output tensor . 4D tensor with shape `(batch_size, q_num_heads, q_sequence_length, v_head_size)` or 3D tensor with shape `(batch_size, q_sequence_length, hidden_size)`. For cases with a 3D input tensor, `hidden_size = q_num_heads * v_head_size`;Updated key cache with shape `(batch_size, kv_num_heads, total_sequence_length, head_size)` where `total_sequence_length = past_sequence_length + kv_sequence_length`.;Updated value cache with shape `(batch_size, kv_num_heads, total_sequence_length, v_head_size)` where `total_sequence_length = past_sequence_length + kv_sequence_length`.;The output of QK matmul. 4D tensor with shape `(batch_size, q_num_heads, q_sequence_length, total_sequence_length)` where `total_sequence_length = past_sequence_length + kv_sequence_length`.","is_causal,kv_num_heads,q_num_heads,qk_matmul_output_mode,scale,softcap,softmax_precision","int (default is 0),int,int,int (default is 0),float,float (default is 0.0),int","If set to `1`, the attention masking is a lower triangular matrix when the mask is a square matrix. The attention masking has the form of the upper left causal bias due to the alignment.;Number of heads of key and value. Must be used with 3D inputs of Q, K and V.;Number of heads of query. Must be used with 3D inputs of Q, K and V.;If set to `0`, qk_matmul_output is the output of qk matmul. If set to `1`, qk_matmul_output includes the addition of the attention mask to the output of qk matmul. If set to `2`, qk_matmul_output is the output after the softcap operation. If set to `3`, qk_matmul_output is the output after the softmax operation. Default value is 0.;Scaling factor applied. Scale q, k before matmul for stability see https://tinyurl.com/sudb9s96 for math. Default value is `1/sqrt(head_size)`;Softcap value for attention weights. Default value is 0.;The floating-point precision used in softmax computation. If softmax precision is not provided, the same precision as the input of softmax (Q and K) is used.",unknown
AveragePool,"22, 1, 7, 10, 11, 19","AveragePool consumes an input tensor X and applies average pooling across    the tensor according to kernel sizes, stride sizes, and pad lengths.    average pooling consisting of computing the average on all values of a    subset of the input tensor according to the kernel size and downsampling the    data into the output tensor Y for further processing. The output spatial shape is calculated differently    depending on whether explicit padding is used, where pads is employed, or auto padding is used, where auto_pad is utilized.    With explicit padding (https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html?highlight=maxpool#torch.nn.MaxPool2d):    ```    output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - dilation[i] * (kernel_shape[i] - 1) - 1) / strides_spatial_shape[i] + 1)    ```    or    ```    output_spatial_shape[i] = ceil((input_spatial_shape[i] + pad_shape[i] - dilation[i] * (kernel_shape[i] - 1) - 1) / strides_spatial_shape[i] + 1)    ```    if ceil_mode is enabled. `pad_shape[i]` is the sum of pads along axis `i`. Sliding windows that would start in the right padded region are ignored.    `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following when ceil_mode is enabled:    ```    VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - ((kernel_spatial_shape[i] - 1) * dilations[i] + 1) + 1) / strides_spatial_shape[i])    SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])    ```    or when ceil_mode is disabled (https://www.tensorflow.org/api_docs/python/tf/keras/layers/AveragePooling2D):    ```    VALID: output_spatial_shape[i] = floor((input_spatial_shape[i] - ((kernel_spatial_shape[i] - 1) * dilations[i] + 1)) / strides_spatial_shape[i]) + 1    SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = floor((input_spatial_shape[i] - 1) / strides_spatial_shape[i]) + 1    ```    And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:    ```    pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + ((kernel_spatial_shape[i] - 1) * dilations[i] + 1) - input_spatial_shape[i]    ```    The output of each pooling window is divided by the number of elements (exclude pad when attribute count_include_pad is zero).",X,T,"Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",Y,T,"Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used","auto_pad,ceil_mode,count_include_pad,dilations,kernel_shape,pads,strides","string (default is NOTSET),int (default is 0),int (default is 0),list of ints,list of ints (required),list of ints,list of ints","auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that `output_shape[i] = ceil(input_shape[i] / strides[i])` for each axis `i`. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.;Whether to use ceil or floor (default) to compute the output shape.;Whether include pad pixels when calculating values for the edges. Default is 0, doesn't count include pad.;Dilation value along each spatial axis of filter. If not present, the dilation defaults to 1 along each spatial axis.;The size of the kernel along each axis.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.;Stride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",unknown
BatchNormalization,"15, 1, 6, 7, 9, 14","Carries out batch normalization as described in the paper   https://arxiv.org/abs/1502.03167. Depending on the mode it is being run,   There are five required inputs 'X', 'scale', 'B', 'input_mean' and   'input_var'.   Note that 'input_mean' and 'input_var' are expected to be the estimated   statistics in inference mode (training_mode=False, default),   and the running statistics in training mode (training_mode=True).   There are multiple cases for the number of outputs, which we list below:   * Output case #1: Y, running_mean, running_var (training_mode=True)   * Output case #2: Y (training_mode=False)   When training_mode=False, extra outputs are invalid.   The outputs are updated as follows when training_mode=True:   ```   running_mean = input_mean * momentum + current_mean * (1 - momentum)   running_var = input_var * momentum + current_var * (1 - momentum)   Y = (X - current_mean) / sqrt(current_var + epsilon) * scale + B   ```   where:   ```   current_mean = ReduceMean(X, axis=all_except_channel_index)   current_var =  ReduceVar(X, axis=all_except_channel_index)   ```   Notice that `ReduceVar` refers to the population variance, and it equals to   `sum(sqrd(x_i - x_avg)) / N`   where `N` is the population size (this formula does not use sample size `N - 1`).   The computation of ReduceMean and ReduceVar uses float to avoid overflow for float16 inputs.   When training_mode=False:   ```   Y = (X - input_mean) / sqrt(input_var + epsilon) * scale + B   ```   For previous (depreciated) non-spatial cases, implementors are suggested   to flatten the input shape to (N x C * D1 * D2 * ... * Dn) before a BatchNormalization Op.   This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.","X,scale,B,input_mean,input_var","T,T1,T1,T2,T2","Input data tensor from the previous operator; dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size, C is the number of channels. Statistics are computed for every channel of C over N and D1 to Dn dimensions. For image data, input dimensions become (N x C x H x W). The op also accepts single dimension input of size N in which case C is assumed to be 1;Scale tensor of shape (C).;Bias tensor of shape (C).;running (training) or estimated (testing) mean tensor of shape (C).;running (training) or estimated (testing) variance tensor of shape (C).","Y,running_mean,running_var","T,T2,T2","The output tensor of the same shape as X;The running mean after the BatchNormalization operator.;The running variance after the BatchNormalization operator. This op uses the population size (N) for calculating variance, and not the sample size N-1.","epsilon,momentum,training_mode","float (default is 1e-05),float (default is 0.9),int (default is 0)","The epsilon value to use to avoid division by zero.;Factor used in computing the running mean and variance.e.g., running_mean = running_mean * momentum + mean * (1 - momentum).;If set to true, it indicates BatchNormalization is being used for training, and outputs 1 and 2 are to be computed.",cube
Bernoulli,"22, 15","Draws binary random numbers (0 or 1) from a Bernoulli distribution. The input tensor should be a tensor   containing probabilities p (a value in the range [0,1]) to be used for drawing the binary random number,   where an output of 1 is produced with probability p and an output of 0 is produced with probability (1-p).   This operator is non-deterministic and may not produce the same values in different   implementations (even if a seed is specified).",input,T1,"All values in input have to be in the range:[0, 1].",output,T2,"The returned output tensor only has values 0 or 1, same shape as input tensor.","dtype,seed","int,float","The data type for the elements of the output tensor. if not specified, we will use the data type of the input tensor.;(Optional) Seed to the random generator, if not specified we will auto generate one.",unknown
BitShift,11,"Bitwise shift operator performs element-wise operation. For each input element, if the   attribute ""direction"" is ""RIGHT"", this operator moves its binary representation toward   the right side so that the input value is effectively decreased. If the attribute ""direction""   is ""LEFT"", bits of binary representation moves toward the left side, which results the   increase of its actual value. The input X is the tensor to be shifted and another input   Y specifies the amounts of shifting. For example, if ""direction"" is ""Right"", X is [1, 4],   and S is [1, 1], the corresponding output Z would be [0, 2]. If ""direction"" is ""LEFT"" with   X=[1, 2] and S=[1, 2], the corresponding output Y would be [2, 8].   Because this operator supports Numpy-style broadcasting, X's and Y's shapes are   not necessarily identical.   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","X,Y","T,T","First operand, input to be shifted.;Second operand, amounts of shift.",Z,T,Output tensor,direction,string (required),"Direction of moving bits. It can be either ""RIGHT"" (for right shift) or ""LEFT"" (for left shift).",unknown
BitwiseAnd,18,"Returns the tensor resulting from performing the bitwise `and` operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the bitwise operator.;Second input operand for the bitwise operator.,C,T,Result tensor.,,,,unknown
BitwiseNot,18,Returns the bitwise not of the input tensor element-wise.,X,T,Input tensor,Y,T,Output tensor,,,,unknown
BitwiseOr,18,"Returns the tensor resulting from performing the bitwise `or` operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the bitwise operator.;Second input operand for the bitwise operator.,C,T,Result tensor.,,,,unknown
BitwiseXor,18,"Returns the tensor resulting from performing the bitwise `xor` operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the bitwise operator.;Second input operand for the bitwise operator.,C,T,Result tensor.,,,,unknown
BlackmanWindow,17,Generates a Blackman window as described in the paper https://ieeexplore.ieee.org/document/1455106.,size,T1,A scalar value indicating the length of the window.,output,T2,A Blackman window with length: size. The output has the shape: [size].,"output_datatype,periodic","int (default is 1),int (default is 1)","The data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T2. The default value is 1 = FLOAT.;If 1, returns a window to be used as periodic function. If 0, return a symmetric window. When 'periodic' is specified, hann computes a window of length size + 1 and returns the first size points. The default value is 1.",unknown
Cast,"23, 1, 6, 9, 13, 19, 21","The operator casts the elements of a given input tensor to a data type   specified by the 'to' argument and returns an output tensor of the same size in   the converted type. The 'to' argument must be one of the data types specified   in the 'DataType' enum field in the TensorProto message.   Casting from string tensor in plain (e.g., ""3.14"" and ""1000"") and scientific numeric representations   (e.g., ""1e-5"" and ""1E8"") to float types is supported. For example, converting string ""100.5"" to an integer may   yield result 100. There are some string literals reserved for special floating-point values;   ""+INF"" (and ""INF""), ""-INF"", and ""NaN"" are positive infinity, negative infinity, and not-a-number, respectively.   Any string which can exactly match ""+INF"" in a case-insensitive way would be mapped to positive infinite. Similarly,   this case-insensitive rule is applied to ""INF"" and ""NaN"". When casting from numeric tensors   to string tensors, plain floating-point representation (such as ""314.15926"") would be used.   Converting non-numerical-literal string such as ""Hello World!"" is an undefined behavior. Cases   of converting string representing floating-point arithmetic value, such as ""2.718"", to INT is an undefined behavior.   Conversion from a numerical type to any numerical type is always allowed.   User must be aware of precision loss and value change caused by range difference between two types.   For example, a 64-bit float 3.1415926459 may be round to a 32-bit float 3.141592. Similarly, converting   an integer 36 to Boolean may produce 1 because we truncate bits which can't be stored in the targeted type.   In more detail, the conversion among numerical types should follow these rules   if the destination type is not a float 8 type.   * Casting from floating point to:     * floating point: +/- infinity if OOR (out of range).     * fixed point: undefined if OOR.     * bool: +/- 0.0 to False; all else to True.   * Casting from fixed point to:     * floating point: +/- infinity if OOR. (+ infinity in the case of uint)     * fixed point: when OOR, discard higher bits and reinterpret (with respect to two's complement representation for       signed types). For example, 200 (int16) -> -56 (int8).     * bool: zero to False; nonzero to True.   * Casting from bool to:     * floating point: `{1.0, 0.0}`.     * fixed point: `{1, 0}`.     * bool: no change.   Float 8 type were introduced to speed up the training of   deep models. By default the conversion of a float *x* obeys   to the following rules. `[x]` means the value rounded to   the target mantissa width.   | x | E4M3FN | E4M3FNUZ | E5M2 | E5M2FNUZ |   |------|----|----|----|----|   | 0 | 0 | 0 | 0 | 0 |   |-0 | -0 | 0 | -0 | 0 |   | NaN | NaN | NaN | NaN | NaN |   | +/- Inf | +/- FLT_MAX | NaN | FLT_MAX | NaN |   | [x] > FLT_MAX | FLT_MAX | FLT_MAX | FLT_MAX | FLT_MAX |   | [x] < -FLT_MAX | -FLT_MAX | -FLT_MAX | -FLT_MAX | -FLT_MAX |   | else | RNE | RNE | RNE | RNE |   The behavior changes if the parameter 'saturate' is set to False.   The rules then become:   | x | E4M3FN | E4M3FNUZ | E5M2 | E5M2FNUZ |   |------|----|----|----|----|   | 0 | 0 | 0 | 0 | 0 |   |-0 | -0 | 0 | -0 | 0 |   | NaN | NaN | NaN | NaN | NaN |   | +/- Inf | NaN | NaN | +/- Inf | NaN |   | [x] > FLT_MAX | NaN | NaN | Inf | NaN |   | [x] < -FLT_MAX | NaN | NaN | -Inf | NaN |   | else | RNE | RNE | RNE | RNE |",input,T1,Input tensor to be cast.,output,T2,Output tensor with the same shape as input with type specified by the 'to' argument,"saturate,to","int (default is 1),int (required)","The parameter defines how the conversion behaves if an input value is out of range of the destination type. It only applies for float 8 conversion (float8e4m3fn, float8e4m3fnuz, float8e5m2, float8e5m2fnuz). It is true by default. All cases are fully described in two tables inserted in the operator description.;The data type to which the elements of the input tensor are cast. Strictly must be one of the types from DataType enum in TensorProto",unknown
CastLike,"23, 15, 19, 21",The operator casts the elements of a given input tensor (the first input) to   the same data type as the elements of the second input tensor.   See documentation of the Cast operator for further details.,"input,target_type","T1,T2",Input tensor to be cast.;The (first) input tensor will be cast to produce a tensor of the same type as this (second input) tensor.,output,T2,Output tensor produced by casting the first input tensor to have the same type as the second input tensor.,saturate,int (default is 1),"The parameter defines how the conversion behaves if an input value is out of range of the destination type. It only applies for float 8 conversion (float8e4m3fn, float8e4m3fnuz, float8e5m2, float8e5m2fnuz). It is true by default. Please refer to operator Cast description for further details.",unknown
Ceil,"13, 1, 6","Ceil takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the ceil is, y = ceil(x), is applied to   the tensor elementwise. If x is integral, +0, -0, NaN,  or infinite, x itself is returned.",X,T,Input tensor,Y,T,Output tensor,,,,vector
Celu,12,"Continuously Differentiable Exponential Linear Units:   Perform the linear unit element-wise on the input tensor X   using formula:   ```   max(0,x) + min(0,alpha*(exp(x/alpha)-1))   ```",X,T,Input tensor,Y,T,Output tensor,alpha,float (default is 1.0),The Alpha value in Celu formula which control the shape of the unit. The default value is 1.0.,unknown
CenterCropPad,18,"Center crop or pad an input to given dimensions.   The crop/pad dimensions can be specified for a subset of the `axes`; unspecified dimensions will remain unchanged.   If the input dimensions are larger than the target crop dimensions, a centered cropping window will be extracted   from the input. The starting value for the cropping window is rounded down, which means that if the difference   between the input shape and the crop shape is odd, the cropping window will be shifted half a pixel to the left   of the input center.   If the input dimensions are smaller than the target crop dimensions, the input will be padded equally on both sides   to center it in the output. In cases where the total number of padding pixels is odd, an additional pixel will be   added to the right side.   The padding value used is zero.","input_data,shape","T,Tind",Input to extract the centered crop from.;1-D tensor representing the cropping window dimensions.,output_data,T,Output data.,axes,list of ints,"If provided, it specifies a subset of axes that 'shape' refer to. If not provided, all axes are assumed [0, 1, ..., r-1], where r = rank(data). Negative value means counting dimensions from the back. Accepted range is [-r, r-1], where r = rank(data). Behavior is undefined if an axis is repeated.",unknown
Clip,"13, 1, 6, 11, 12","Clip operator limits the given input within an interval. The interval is   specified by the inputs 'min' and 'max'. They default to   numeric_limits::lowest() and numeric_limits::max(), respectively.   When 'min' is greater than 'max', the clip operator sets all the 'input' values to   the value of 'max'. Thus, this is equivalent to 'Min(max, Max(input, min))'.","input,min,max","T,T,T","Input tensor whose elements to be clipped;Minimum value, under which element is replaced by min. It must be a scalar(tensor of empty shape).;Maximum value, above which element is replaced by max. It must be a scalar(tensor of empty shape).",output,T,Output tensor with clipped input elements,,,,vector
Col2Im,18,"The operator rearranges column blocks back into a multidimensional image   Col2Im behaves similarly to PyTorch's fold https://pytorch.org/docs/stable/generated/torch.nn.Fold.html,   but it only supports *batched* multi-dimensional image tensors.   Another implementation in Python with N-dimension support can be found at https://github.com/f-dangel/unfoldNd/.   NOTE:     Although specifying image_shape looks redundant because it could be calculated from     convolution formulas, it is required as input for more advanced scenarios as explained     at PyTorch's implementation (https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/Col2Im.cpp#L10)","input,image_shape,block_shape","T,tensor(int64),tensor(int64)","Input data tensor to be rearranged from column blocks back into an image. This is a 3-dimensional tensor containing [N, C * n-ary-product(block_shape), L], where N is batch dimension, C is image channel dimension and L is number of blocks.The blocks are enumerated in increasing lexicographic-order of their indices.For example, with an image-size 10*20 and block-size 9*18, there would be 2*3 blocks, enumerated in the order block(0, 0), block(0, 1), block(0, 2), block(1, 0), block(1, 1), block(1, 2).;The shape of the spatial dimensions of the image after rearranging the column blocks.This is a 1-dimensional tensor with size of at least 2, containing the value [H_img, W_img]  for a 2-D image or [dim_i1, dim_i2, ..., dim_iN] for a N-D image.;The shape of the block to apply on the input.This is a 1-dimensional tensor of size of at least 2, containing the value [H_block, W_block]  for a 2-D image or [dim_b1, dim_b2, ..., dim_bN] for a N-D block.This is the block-shape before dilation is applied to it.",output,T,Output tensor produced by rearranging blocks into an image.,"dilations,pads,strides","list of ints,list of ints,list of ints","1-dimensional tensor with dilation value along each spatial axis of the image. If not present, the dilation defaults to 1 along each spatial axis of the image.;1-dimensional tensor with padding value for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin is the number of pixels added at the beginning of axis `i` and xi_end is the number of pixels added at the end of axis `i`. If not present, the padding defaults to 0 along start and end of each spatial axis.;1-dimensional tensor with stride value along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",unknown
Compress,"11, 9","Selects slices from an input tensor along a given axis where condition evaluates to True for each axis index.       In case axis is not provided, input is flattened before elements are selected.       Compress behaves like numpy.compress: https://docs.scipy.org/doc/numpy/reference/generated/numpy.compress.html","input,condition","T,T1",Tensor of rank r >= 1.;Rank 1 tensor of booleans to indicate which slices or data elements to be selected. Its length can be less than the input length along the axis or the flattened input size if axis is not specified. In such cases data slices or elements exceeding the condition length are discarded.,output,T,Tensor of rank r if axis is specified. Otherwise output is a Tensor of rank 1.,axis,int,"(Optional) Axis along which to take slices. If not specified, input is flattened before elements being selected. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).",unknown
Concat,"13, 1, 4, 11","Concatenate a list of tensors into a single tensor. All input tensors must have the same shape, except for the dimension size of the axis to concatenate on.",inputs,T,List of tensors for concatenation,concat_result,T,Concatenated tensor,axis,int (required),"Which axis to concat on. A negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(inputs)..",mem
ConcatFromSequence,11,"Concatenate a sequence of tensors into a single tensor.   All input tensors must have the same shape, except for the dimension size of the axis to concatenate on.   By default 'new_axis' is 0, the behavior is similar to numpy.concatenate.   When 'new_axis' is 1, the behavior is similar to numpy.stack.",input_sequence,S,Sequence of tensors for concatenation,concat_result,T,Concatenated tensor,"axis,new_axis","int (required),int (default is 0)","Which axis to concat on. Accepted range in `[-r, r - 1]`, where `r` is the rank of input tensors. When `new_axis` is 1, accepted range is `[-r - 1, r]`.;Insert and concatenate on a new axis or not, default 0 means do not insert new axis.",unknown
Constant,"23, 1, 9, 11, 12, 13, 19, 21","This operator produces a constant tensor. Exactly one of the provided attributes, either value, sparse_value,   or value_* must be specified.",output,T,Output tensor containing the same value of the provided tensor.,output,T,Output tensor containing the same value of the provided tensor.,"sparse_value,value,value_float,value_floats,value_int,value_ints,value_string,value_strings","sparse_tensor,tensor,float,list of floats,int,list of ints,string,list of strings","The value for the elements of the output tensor in sparse format.;The value for the elements of the output tensor.;The value for the sole element for the scalar, float32, output tensor.;The values for the elements for the 1D, float32, output tensor.;The value for the sole element for the scalar, int64, output tensor.;The values for the elements for the 1D, int64, output tensor.;The value for the sole element for the scalar, UTF-8 string, output tensor.;The values for the elements for the 1D, UTF-8 string, output tensor.",unknown
ConstantOfShape,"23, 9, 20, 21",Generate a tensor with given value and shape.,input,T1,"1D tensor. The shape of the expected output tensor. If empty tensor is given, the output would be a scalar. All values must be >= 0.",output,T2,"Output tensor of shape specified by 'input'.If attribute 'value' is specified, the value and datatype of the output tensor is taken from 'value'.If attribute 'value' is not specified, the value in the output defaults to 0, and the datatype defaults to float32.",value,tensor,"(Optional) The value of the output elements.Should be a one-element tensor. If not specified, it defaults to a tensor of value 0 and datatype float32",unknown
Conv,"22, 1, 11","The convolution operator consumes an input tensor and a filter, and   computes the output.","X,W,B","T,T,T","Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 ... x Dn). Optionally, if dimension denotation is in effect, the operation expects input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].;The weight tensor that will be used in the convolutions; has size (M x C/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C/group x k1 x k2 x ... x kn), where (k1 x k2 x ... kn) is the dimension of the kernel. Optionally, if dimension denotation is in effect, the operation expects the weight tensor to arrive with the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL, FILTER_SPATIAL ...]. Assuming zero based indices for the shape array, X.shape[1] == (W.shape[1] * group) == C and W.shape[0] mod G == 0. Or in other words FILTER_IN_CHANNEL multiplied by the number of groups should be equal to DATA_CHANNEL and the number of feature maps M should be a multiple of the number of groups G.;Optional 1D bias to be added to the convolution, has size of M.",Y,T,"Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.","auto_pad,dilations,group,kernel_shape,pads,strides","string (default is NOTSET),list of ints,int (default is 1),list of ints,list of ints,list of ints","auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that `output_shape[i] = ceil(input_shape[i] / strides[i])` for each axis `i`. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.;dilation value along each spatial axis of the filter. If not present, the dilation defaults is 1 along each spatial axis.;number of groups input channels and output channels are divided into.;The shape of the convolution kernel. If not present, should be inferred from input W.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.;Stride along each spatial axis. If not present, the stride defaults is 1 along each spatial axis.",cube
ConvInteger,10,"The integer convolution operator consumes an input tensor, its zero-point, a filter, and its zero-point,   and computes the output. The production MUST never overflow. The accumulation may overflow if and only if in 32 bits.","x,w,x_zero_point,w_zero_point","T1,T2,T1,T2","Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 ... x Dn). Optionally, if dimension denotation is in effect, the operation expects input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].;The weight tensor that will be used in the convolutions; has size (M x C/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C/group x k1 x k2 x ... x kn), where (k1 x k2 x ... kn) is the dimension of the kernel. Optionally, if dimension denotation is in effect, the operation expects the weight tensor to arrive with the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL, FILTER_SPATIAL ...]. X.shape[1] == (W.shape[1] * group) == C (assuming zero based indices for the shape array). Or in other words FILTER_IN_CHANNEL should be equal to DATA_CHANNEL.;Zero point tensor for input 'x'. It's optional and default value is 0. It's a scalar, which means a per-tensor/layer quantization.;Zero point tensor for input 'w'. It's optional and default value is 0.  It could be a scalar or a 1-D tensor, which means a per-tensor/layer or per output channel quantization. If it's a 1-D tensor, its number of elements should be equal to the number of output channels (M)",y,T3,"Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.","auto_pad,dilations,group,kernel_shape,pads,strides","string (default is NOTSET),list of ints,int (default is 1),list of ints,list of ints,list of ints","auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that `output_shape[i] = ceil(input_shape[i] / strides[i])` for each axis `i`. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.;dilation value along each spatial axis of the filter. If not present, the dilation defaults to 1 along each axis.;number of groups input channels and output channels are divided into. default is 1.;The shape of the convolution kernel. If not present, should be inferred from input 'w'.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0.The value represent the number of pixels added to the beginning and end part of the corresponding axis.`pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number ofpixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`.This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaultsto 0 along start and end of each spatial axis.;Stride along each spatial axis. If not present, the stride defaults to 1 along each axis.",unknown
ConvTranspose,"22, 1, 11","The convolution transpose operator consumes an input tensor and a filter,   and computes the output.   If the pads parameter is provided the shape of the output is calculated via the following equation:     output_shape[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + ((kernel_shape[i] - 1) * dilations[i] + 1) - pads[start_i] - pads[end_i]   output_shape can also be explicitly specified in which case pads values are auto generated using these equations:     total_padding[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + ((kernel_shape[i] - 1) * dilations[i] + 1) - output_shape[i]     If (auto_pads == SAME_UPPER): pads[start_i] = total_padding[i]/2; pads[end_i] = total_padding[i] - (total_padding[i]/2)     Else: pads[start_i] = total_padding[i] - (total_padding[i]/2); pads[end_i] = (total_padding[i]/2).","X,W,B","T,T,T","Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 ... x Dn);The weight tensor that will be used in the convolutions; has size (C x M/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the weight shape will be (C x M/group x k1 x k2 x ... x kn), where (k1 x k2 x ... x kn) is the dimension of the kernel. The number of channels in the output should be equal to W.shape[1] * group (assuming zero based indices of the shape array);Optional 1D bias to be added to the convolution, has size of M.",Y,T,"Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, pad lengths and group count. The number of channels in the output should be equal to W.shape[1] * group (assuming zero based indices of the shape array)","auto_pad,dilations,group,kernel_shape,output_padding,output_shape,pads,strides","string (default is NOTSET),list of ints,int (default is 1),list of ints,list of ints,list of ints,list of ints,list of ints","auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that `output_shape[i] = input_shape[i] * strides[i]` for each axis `i`. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.;dilation value along each spatial axis of the filter. If not present, the dilation defaults to 1 along each spatial axis.;number of groups input channels and output channels are divided into.;The shape of the convolution kernel. If not present, should be inferred from input W.;Additional elements added to the side with higher coordinate indices in the output. Each padding value in ""output_padding"" must be less than the corresponding stride/dilation dimension. By default, this attribute is a zero vector. Note that this attribute doesn't directly affect the computed output values. It only controls the selection of the computed values, so changing this attribute only adds or removes output elements. If ""output_shape"" is explicitly provided, ""output_padding"" does not contribute additional size to ""output_shape"" but participates in the computation of the needed padding amount. This is also called adjs or adjustment in some frameworks.;The shape of the output can be explicitly set which will cause pads values to be auto generated. If output_shape is specified pads values are ignored. See doc for details for equations to generate pads. Note that the output_shape attribute value should not include dimensions for batch size and channels, which are automatically inferred.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.;Stride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",cube
Cos,"22, 7","Calculates the cosine of the given input tensor, element-wise.",input,T,Input tensor,output,T,The cosine of the input tensor computed element-wise,,,,unknown
Cosh,"22, 9",Calculates the hyperbolic cosine of the given input tensor element-wise.,input,T,Input tensor,output,T,The hyperbolic cosine values of the input tensor computed element-wise,,,,unknown
CumSum,"14, 11","Performs cumulative sum of the input elements along the given axis.   By default, it will do the sum inclusively meaning the first element is copied as is.   Through an `exclusive` attribute, this behavior can change to exclude the first element.   It can also perform summation in the opposite direction of the axis. For that, set `reverse` attribute to 1.   Example:   ```   input_x = [1, 2, 3]   axis=0   output = [1, 3, 6]   exclusive=1   output = [0, 1, 3]   exclusive=0   reverse=1   output = [6, 5, 3]   exclusive=1   reverse=1   output = [5, 3, 0]   ```","x,axis","T,T2","An input tensor that is to be processed.;A 0-D tensor. Must be in the range [-rank(x), rank(x)-1]. Negative value means counting dimensions from the back.",y,T,Output tensor of the same type as 'x' with cumulative sums of the x's elements,"exclusive,reverse","int (default is 0),int (default is 0)","If set to 1 will return exclusive sum in which the top element is not included. In other terms, if set to 1, the j-th output element would be the sum of the first (j-1) elements. Otherwise, it would be the sum of the first j elements.;If set to 1 will perform the sums in reverse direction.",unknown
DFT,"20, 17","Computes the discrete Fourier Transform (DFT) of the input.   Assuming the input has shape `[M, N]`, where `N` is the dimension over which the   DFT is computed and `M` denotes the conceptual ""all other dimensions,""   the DFT `y[m, k]` of shape `[M, N]` is defined as   $$y[m, k] = \sum_{n=0}^{N-1} e^{-2 \pi j \frac{k n}{N} } x[m, n] ,$$   and the inverse transform is defined as   $$x[m, n] = \frac{1}{N} \sum_{k=0}^{N-1} e^{2 \pi j \frac{k n}{N} } y[m, k] ,$$   where $j$ is the imaginary unit.   The actual shape of the output is specified in the ""output"" section.   Reference: https://docs.scipy.org/doc/scipy/tutorial/fft.html","input,dft_length,axis","T1,T2,tensor(int64)","For real input, the following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][1]`. For complex input, the following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][2]`. The final dimension represents the real and imaginary parts of the value in that order.;The length of the signal as a scalar. If greater than the axis dimension, the signal will be zero-padded up to `dft_length`. If less than the axis dimension, only the first `dft_length` values will be used as the signal.;The axis as a scalar on which to perform the DFT. Default is `-2` (last signal axis). Negative value means counting dimensions from the back. Accepted range is $[-r, -2] \cup [0, r-2]$ where `r = rank(input)`. The last dimension is for representing complex numbers and thus is an invalid axis.",output,T1,"The Fourier Transform of the input vector. If `onesided` is `0`, the following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][2]`. If `axis=0` and `onesided` is `1`, the following shape is expected: `[floor(signal_dim0/2)+1][signal_dim1][signal_dim2]...[signal_dimN][2]`. If `axis=1` and `onesided` is `1`, the following shape is expected: `[signal_dim0][floor(signal_dim1/2)+1][signal_dim2]...[signal_dimN][2]`. If `axis=N` and `onesided` is `1`, the following shape is expected: `[signal_dim0][signal_dim1][signal_dim2]...[floor(signal_dimN/2)+1][2]`. The `signal_dim` at the specified `axis` is equal to the `dft_length`.","inverse,onesided","int (default is 0),int (default is 0)","Whether to perform the inverse discrete Fourier Transform. Default is 0, which corresponds to `false`.;If `onesided` is `1` and input is real, only values for `k` in `[0, 1, 2, ..., floor(n_fft/2) + 1]` are returned because the real-to-complex Fourier transform satisfies the conjugate symmetry, i.e., `X[m, k] = X[m, n_fft-k]*`, where `m` denotes ""all other dimensions"" DFT was not applied on. If the input tensor is complex, onesided output is not possible. Value can be `0` or `1`. Default is `0`.",unknown
DeformConv,"22, 19",Performs deformable convolution as described in https://arxiv.org/abs/1703.06211 and https://arxiv.org/abs/1811.11168.   This operator specification supports the general N-D case. Note that most common use cases have 2D or 3D data.,"X,W,offset,B,mask","T,T,T,T,T","Input data tensor. For 2D image data, it has shape (N, C, H, W) where N is the batch size, C is the number of input channels, and H and W are the height and width. In general, the shape is (N, C, D1, D2, ... , Dn) for n-dimensional data, where D1 to Dn are the spatial dimension sizes. Most common use cases have n = 2 or 3.;Weight tensor that will be used in the convolutions. It has shape (oC, C/group, kH, kW), where oC is the number of output channels and kH and kW are the kernel height and width. For more than 2 dimensions, it has shape (oC, C/group, k1, k2, ... , kn).;Offset tensor denoting the offset for the sampling locations in the convolution kernel. It has shape (N, offset_group * kH * kW * 2, oH, oW) for 2D data or (N, offset_group * k1 * k2 * ... * kn * n, o1, o2, ... , on) for nD data. Use linear interpolationfor fractional offset values. Sampling locations outside of the padded input tensor gives zero.;Optional 1D bias of length oC to be added to the convolution. Default is a tensor of zeros.;The mask tensor to be applied to each position in the convolution kernel. It has shape (N, offset_group * kH * kW, oH, oW) for 2D data or (N, offset_group * k1 * k2 * ... * kn * n, o1, o2, ... , on) for nD data. Default is a tensor of ones.",Y,T,"Output data tensor that contains the result of convolution. It has shape (N, oC, oH, oW) for 2D data or (N, oC, o1, o2, ..., on) for nD data","dilations,group,kernel_shape,offset_group,pads,strides","list of ints,int (default is 1),list of ints,int (default is 1),list of ints,list of ints","Dilation value along each spatial axis of the kernel. Default is 1 along each axis.;Number of groups the input and output channels, C and oC, are divided into. C and oC must both be divisible by group. Default is 1.;Shape of the convolution kernel. If not present, it is inferred from the shape of input W.;Number of groups of offset. C must be divisible by offset_group. Default is 1.;Padding for the beginning and end along each spatial axis. The values represent the number of pixels added to the beginning and end of the corresponding axis and can take any nonnegative value. The format should be as follows: [x1_begin, x2_begin, ..., x1_end, x2_end, ...], where xi_begin is the number of pixels added at the beginning of axis `i` and xi_end is the number of pixels added at the end of axis `i`. Default is 0 along each axis.;Stride along each spatial axis. Default is 1 along each axis.",unknown
DepthToSpace,"13, 1, 11","DepthToSpace rearranges (permutes) data from depth into blocks of spatial data.   This is the reverse transformation of SpaceToDepth. More specifically, this op outputs a copy of   the input tensor where values from the depth dimension are moved in spatial blocks to the height   and width dimensions. By default, `mode` = `DCR`.   In the DCR mode, elements along the depth dimension from the input tensor are rearranged in the   following order: depth, column, and then row. The output y is computed from the input x as below:   ```   b, c, h, w = x.shape   tmp = np.reshape(x, [b, blocksize, blocksize, c // (blocksize**2), h, w])   tmp = np.transpose(tmp, [0, 3, 4, 1, 5, 2])   y = np.reshape(tmp, [b, c // (blocksize**2), h * blocksize, w * blocksize])   ```   In the CRD mode, elements along the depth dimension from the input tensor are rearranged in the   following order: column, row, and the depth. The output y is computed from the input x as below:   ```   b, c, h, w = x.shape   tmp = np.reshape(x, [b, c // (blocksize ** 2), blocksize, blocksize, h, w])   tmp = np.transpose(tmp, [0, 1, 4, 2, 5, 3])   y = np.reshape(tmp, [b, c // (blocksize ** 2), h * blocksize, w * blocksize])   ```",input,T,"Input tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",output,T,"Output tensor of [N, C/(blocksize * blocksize), H * blocksize, W * blocksize].","blocksize,mode","int (required),string (default is DCR)","Blocks of [blocksize, blocksize] are moved.;DCR (default) for depth-column-row order re-arrangement. Use CRD for column-row-depth order.",unknown
DequantizeLinear,"23, 10, 13, 19, 21","The linear dequantization operator. It consumes a quantized tensor, a scale, and a zero point to compute the   full-precision tensor. The dequantization formula is `y = (x - x_zero_point) * x_scale`. `x_scale` and `x_zero_point`   must have the same shape, determining the quantization's granularity: a scalar for per-tensor/per-layer quantization,   a 1-D tensor for per-axis quantization, or have a rank identical to the input for blocked quantization.   See QuantizeLinear for details on quantization granularity.   `x_zero_point` and `x` must have the same type. `x` and `y` must have the same shape. In the case of dequantizing   `int32`, there's no zero point (zero point is supposed to be 0).   `zero-point` is usually not used in the case of float8 and 4-bit types quantization, but the dequantization formula remains the same   for consistency. The output type is determined by the attribute `output_dtype`. If `output_dtype` is not supplied then the output type   is the same as `x_scale`. The output type also determines the precision of the multiplication operation.","x,x_scale,x_zero_point","T1,T2,T1","N-D quantized input tensor to be de-quantized.;Scale for input `x`. For per-tensor/layer dequantization the scale is a scalar, for per per-axis dequantization it is a 1-D Tensor and for blocked dequantization it has the same shape as the input, except for one dimension in which blocking is performed.;Zero point for input `x`. Shape must match x_scale. It's optional. Zero point is 0 when it's not specified.",y,T3,"N-D full precision output tensor. It has the same shape as input `x`. The data type is specified by the `output_dtype` attribute or, in its absence, the type of `x_scale`.","axis,block_size,output_dtype","int (default is 1),int (default is 0),int (default is 0)","(Optional) The axis of the dequantizing dimension of the input tensor. Used for per-axis and blocked quantization. Negative value means counting dimensions from the back. Accepted range is `[-r, r-1]` where `r = rank(input)`.;(Optional) The size of the quantization block (number of times every scale is replicated). Used only for blocked quantization. The block size is a positive integer. Given `x` shape `(D0, ..., Di, ..., Dn)`, `y_scale` shape `(S0, ... Si, ...Sn)` and `axis=i`, the accepted range is `[ceil(Di/Si), ceil(Di/(Si-1))-1]`;(Optional) The output data type. If not supplied, the output data type is inferred from `x_scale` data type (`T2`)",unknown
Det,"22, 11","Det calculates determinant of a square matrix or batches of square matrices.   Det takes one input tensor of shape `[*, M, M]`, where `*` is zero or more batch dimensions,   and the inner-most 2 dimensions form square matrices.   The output is a tensor of shape `[*]`, containing the determinants of all input submatrices.   e.g., When the input is 2-D, the output is a scalar(shape is empty: `[]`).",X,T,Input tensor,Y,T,Output tensor,,,,unknown
Div,"14, 1, 6, 7, 13","Performs element-wise binary division (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).   (Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.","A,B","T,T",First operand.;Second operand.,C,T,"Result, has same element type as two inputs",,,,vector
Dropout,"22, 1, 6, 7, 10, 12, 13","Dropout takes an input floating-point tensor, an optional input ratio (floating-point scalar) and an optional input training_mode (boolean scalar). It produces two tensor outputs,   output (floating-point tensor) and mask (optional `Tensor<bool>`). If `training_mode` is true then the output Y will be a random dropout;   Note that this Dropout scales the masked input data by the following equation, so to convert the trained model into inference mode,   the user can simply not pass `training_mode` input or set it to false.   ```   output = scale * data * mask,   ```   where   ```   scale = 1. / (1. - ratio).   ```   This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.","data,ratio,training_mode","T,T1,T2","The input data as Tensor.;The ratio of random dropout, with value in [0, 1). If this input was not set, or if it was set to 0, the output would be a simple copy of the input. If it's non-zero, output will be a random dropout of the scaled input, which is typically the case during training. It is an optional value, if not specified it will default to 0.5.;If set to true then it indicates dropout is being used for training. It is an optional value hence unless specified explicitly, it is false. If it is false, ratio is ignored and the operation mimics inference mode where nothing will be dropped from the input data and if mask is requested as output it will contain all ones.","output,mask","T,T2",The output.;The output mask.,seed,int,"(Optional) Seed to the random generator, if not specified we will auto generate one.",unknown
DynamicQuantizeLinear,11,"A Function to fuse calculation for Scale, Zero Point and FP32->8Bit conversion of FP32 Input data.   Outputs Scale, ZeroPoint and Quantized Input for a given FP32 Input.   Scale is calculated as:   ```   y_scale = (maximum(0, max(x)) - minimum(0, min(x))) / (qmax - qmin)   ```   * where qmax and qmin are max and min values for quantization range i.e. [0, 255] in case of uint8   * data range is adjusted to include 0.   Zero point is calculated as:   ```   intermediate_zero_point = qmin - min(x)/y_scale   y_zero_point = cast(round(saturate(itermediate_zero_point)))   ```   * where qmax and qmin are max and min values for quantization range .i.e [0, 255] in case of uint8   * for saturation, it saturates to [0, 255] if it's uint8, or [-127, 127] if it's int8. Right now only uint8 is supported.   * rounding to nearest ties to even.   Data quantization formula is:   ```   y = saturate (round (x / y_scale) + y_zero_point)   ```   * for saturation, it saturates to [0, 255] if it's uint8, or [-127, 127] if it's int8. Right now only uint8 is supported.   * rounding to nearest ties to even.",x,T1,Input tensor,"y,y_scale,y_zero_point","T2,tensor(float),T2","Quantized output tensor;Output scale. It's a scalar, which means a per-tensor/layer quantization.;Output zero point. It's a scalar, which means a per-tensor/layer quantization.",,,,unknown
Einsum,12,"An einsum of the form `term1, term2 -> output-term` produces an output tensor using the following equation   ```   output[output-term] = reduce-sum( input1[term1] * input2[term2] )   ```   where the reduce-sum performs a summation over all the indices occurring in the input terms (term1, term2)   that do not occur in the output-term.   The Einsum operator evaluates algebraic tensor operations on a sequence of tensors, using the Einstein summation   convention. The equation string contains a comma-separated sequence of lower case letters. Each term corresponds to   an operand tensor, and the characters within the terms correspond to operands dimensions.   This sequence may be followed by ""->"" to separate the left and right hand side of the equation.   If the equation contains ""->"" followed by the right-hand side, the explicit (not classical) form of the Einstein   summation is performed, and the right-hand side indices indicate output tensor dimensions. In other cases,   output indices are (implicitly) set to the alphabetically sorted sequence of indices appearing exactly once in the   equation.   When a dimension character is repeated in the left-hand side, it represents summation along the dimension.   The equation may contain ellipsis (""..."") to enable broadcasting. Ellipsis must indicate a fixed number of dimensions.   Specifically, every occurrence of ellipsis in the equation must represent the same number of dimensions.   The right-hand side may contain exactly one ellipsis. In implicit mode, the ellipsis dimensions are set to the   beginning of the output. The equation string may contain space (U+0020) character.",Inputs,T,Operands,Output,T,Output tensor,equation,string (required),Einsum expression string.,unknown
Elu,"22, 1, 6","Elu takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x <   0`, `f(x) = x for x >= 0`., is applied to the tensor elementwise.",X,T,1D input tensor,Y,T,1D output tensor,alpha,float (default is 1.0),Coefficient of ELU.,vector
Equal,"19, 1, 7, 11, 13","Returns the tensor resulted from performing the `equal` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,vector
Erf,"13, 9",Computes the error function of the given input tensor element-wise.,input,T,Input tensor,output,T,The error function of the input tensor computed element-wise. It has the same shape and type of the input.,,,,unknown
Exp,"13, 1, 6","Calculates the exponential of the given input tensor, element-wise.",input,T,Input tensor,output,T,The exponential of the input tensor computed element-wise,,,,vector
Expand,"13, 8","Broadcast the input tensor following the given shape and the broadcast rule.   The broadcast rule is similar to numpy.array(input) * numpy.ones(shape):   Dimensions are right alignment;   Two corresponding dimensions must have the same value, or one of them is equal to 1.   Also, this operator is similar to numpy.broadcast_to(input, shape),   but the major difference is numpy.broadcast_to() does not allow shape to be smaller than input.size().   It is possible that the output.shape is not equal to shape, when some dimensions in shape is equal to 1,   or the shape.ndim < input.shape.ndim.","input,shape","T,tensor(int64)","Input tensor;A 1-D tensor indicates the shape you want to expand to, following the broadcast rule",output,T,Output tensor,,,,unknown
EyeLike,"22, 9","Generate a 2D tensor (matrix) with ones on the diagonal and zeros everywhere else. Only 2D   tensors are supported, i.e. input T1 must be of rank 2. The shape of the output tensor is the   same as the input tensor. The data type can be specified by the 'dtype' argument. If   'dtype' is not specified, then the type of input tensor is used. By default, the main diagonal   is populated with ones, but attribute 'k' can be used to populate upper or lower diagonals.   The 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the   TensorProto message and be valid as an output type.",input,T1,"2D input tensor to copy shape, and optionally, type information from.",output,T2,"Output tensor, same shape as input tensor T1.","dtype,k","int,int (default is 0)","(Optional) The data type for the elements of the output tensor. If not specified,the data type of the input tensor T1 is used. If input tensor T1 is also notspecified, then type defaults to 'float'.;(Optional) Index of the diagonal to be populated with ones. Default is 0. If T2 is the output, this op sets T2[i, i+k] = 1. k = 0 populates the main diagonal, k > 0 populates an upper diagonal,  and k < 0 populates a lower diagonal.",unknown
Flatten,"23, 1, 9, 11, 13, 21","Flattens the input tensor into a 2D matrix. If input tensor has shape   (d_0, d_1, ... d_n) then the output will have shape   (d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).",input,T,A tensor of rank >= axis.,output,T,"A 2D tensor with the contents of the input tensor, with input dimensions up to axis flattened to the outer dimension of the output and remaining input dimensions flattened into the inner dimension of the output.",axis,int (default is 1),"Indicate up to which input dimensions (exclusive) should be flattened to the outer dimension of the output. The value for axis must be in the range [-r, r], where r is the rank of the input tensor. Negative value means counting dimensions from the back. When axis = 0, the shape of the output tensor is (1, (d_0 X d_1 ... d_n), where the shape of the input tensor is (d_0, d_1, ... d_n).",unknown
Floor,"13, 1, 6","Floor takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the floor is, y = floor(x), is applied to   the tensor elementwise. If x is integral, +0, -0, NaN,  or infinite, x itself is returned.",X,T,Input tensor,Y,T,Output tensor,,,,vector
GRU,"22, 1, 3, 7, 14","Computes an one-layer GRU. This operator is usually supported via some custom   implementation such as CuDNN.   Notations:   * `X` - input tensor   * `z` - update gate   * `r` - reset gate   * `h` - hidden gate   * `t` - time step (t-1 means previous time step)   * `W[zrh]` - W parameter weight matrix for update, reset, and hidden gates   * `R[zrh]` - R recurrence weight matrix for update, reset, and hidden gates   * `Wb[zrh]` - W bias vectors for update, reset, and hidden gates   * `Rb[zrh]` - R bias vectors for update, reset, and hidden gates   * `WB[zrh]` - W parameter weight matrix for backward update, reset, and hidden gates   * `RB[zrh]` - R recurrence weight matrix for backward update, reset, and hidden gates   * `WBb[zrh]` - W bias vectors for backward update, reset, and hidden gates   * `RBb[zrh]` - R bias vectors for backward update, reset, and hidden gates   * `H` - Hidden state   * `num_directions` - 2 if direction == bidirectional else 1   Activation functions:   * Relu(x)                - max(0, x)   * Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})   * Sigmoid(x)             - 1/(1 + e^{-x})   NOTE:     Below are optional   * Affine(x)              - alpha * x + beta   * LeakyRelu(x)           - x if x >= 0 else alpha * x   * ThresholdedRelu(x)     - x if x >= alpha else 0   * ScaledTanh(x)          - alpha * Tanh(beta * x)   * HardSigmoid(x)         - min(max(alpha * x + beta, 0), 1)   * Elu(x)                 - x if x >= 0 else alpha * (e^x - 1)   * Softsign(x)            - x/(1 + |x|)   * Softplus(x)            - log(1 + e^x)   Equations (Default: f=Sigmoid, g=Tanh):   * zt = f(Xt*(Wz^T) + Ht-1*(Rz^T) + Wbz + Rbz)   * rt = f(Xt*(Wr^T) + Ht-1*(Rr^T) + Wbr + Rbr)   * ht = g(Xt*(Wh^T) + (rt (.) Ht-1)*(Rh^T) + Rbh + Wbh) # default, when linear_before_reset = 0   * ht = g(Xt*(Wh^T) + (rt (.) (Ht-1*(Rh^T) + Rbh)) + Wbh) # when linear_before_reset != 0   * Ht = (1 - zt) (.) ht + zt (.) Ht-1   This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.","X,W,R,B,sequence_lens,initial_h","T,T,T,T,T1,T","The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.;The weight tensor for the gates. Concatenation of `W[zrh]` and `WB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, input_size]`.;The recurrence weight tensor. Concatenation of `R[zrh]` and `RB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, hidden_size]`.;The bias tensor for the gates. Concatenation of `[Wb[zrh], Rb[zrh]]` and `[WBb[zrh], RBb[zrh]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 6*hidden_size]`. Optional: If not specified - assumed to be 0;Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.;Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.","Y,Y_h","T,T","A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`.;The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.","activation_alpha,activation_beta,activations,clip,direction,hidden_size,layout,linear_before_reset","list of floats,list of floats,list of strings,float,string (default is forward),int,int (default is 0),int (default is 0)","Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.;Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.;A list of 2 (or 4 if bidirectional) activation functions for update, reset, and hidden gates. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.;Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.;Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.;Number of neurons in the hidden layer;The shape format of inputs X, initial_h and outputs Y, Y_h. If 0, the following shapes are expected: X.shape = [seq_length, batch_size, input_size], Y.shape = [seq_length, num_directions, batch_size, hidden_size], initial_h.shape = Y_h.shape = [num_directions, batch_size, hidden_size]. If 1, the following shapes are expected: X.shape = [batch_size, seq_length, input_size], Y.shape = [batch_size, seq_length, num_directions, hidden_size], initial_h.shape = Y_h.shape = [batch_size, num_directions, hidden_size].;When computing the output of the hidden gate, apply the linear transformation before multiplying by the output of the reset gate.",cube
Gather,"13, 1, 11","Given `data` tensor of rank r >= 1, and `indices` tensor of rank q, gather   entries of the axis dimension of `data` (by default outer-most one as axis=0) indexed by `indices`, and concatenates   them in an output tensor of rank q + (r - 1).   It is an indexing operation that indexes into the input `data` along a single (specified) axis.   Each entry in `indices` produces a `r-1` dimensional slice of the input tensor.   The entire operation produces, conceptually, a `q`-dimensional tensor of `r-1` dimensional slices,   which is arranged into a `q + (r-1)`-dimensional tensor, with the `q` dimensions taking the   place of the original `axis` that is being indexed into.   The following few examples illustrate how `Gather` works for specific shapes of `data`,   `indices`, and given value of `axis`:   | data shape | indices shape | axis | output shape | output equation |   | --- | --- | --- | --- | --- |   | (P, Q) | ( )  (a scalar)   | 0 | (Q)       | output[q] = data[indices, q] |   | (P, Q, R) | ( )  (a scalar)   | 1 | (P, R)       | output[p, r] = data[p, indices, r] |   | (P, Q) | (R, S) | 0 | (R, S, Q) | output[r, s, q] = data[ [indices[r, s], q] |   | (P, Q) | (R, S) | 1 | (P, R, S) | output[p, r, s] = data[ p, indices[r, s]] |   More generally, if `axis = 0`, let `k = indices[i_{0}, ..., i_{q-1}]`   then `output[i_{0}, ..., i_{q-1}, j_{0}, ..., j_{r-2}] = input[k , j_{0}, ..., j_{r-2}]`:   ```   data = [       [1.0, 1.2],       [2.3, 3.4],       [4.5, 5.7],   ]   indices = [       [0, 1],       [1, 2],   ]   output = [       [           [1.0, 1.2],           [2.3, 3.4],       ],       [           [2.3, 3.4],           [4.5, 5.7],       ],   ]   ```   If `axis = 1`, let `k = indices[i_{0}, ..., i_{q-1}]`   then `output[j_{0}, i_{0}, ..., i_{q-1}, j_{1}, ..., j_{r-2}] = input[j_{0}, k, j_{1}, ..., j_{r-2}]`:   ```   data = [       [1.0, 1.2, 1.9],       [2.3, 3.4, 3.9],       [4.5, 5.7, 5.9],   ]   indices = [       [0, 2],   ]   axis = 1,   output = [           [[1.0, 1.9]],           [[2.3, 3.9]],           [[4.5, 5.9]],   ]   ```","data,indices","T,Tind","Tensor of rank r >= 1.;Tensor of int32/int64 indices, of any rank q. All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.",output,T,Tensor of rank q + (r - 1).,axis,int (default is 0),"Which axis to gather on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).",mem
GatherElements,"13, 11","GatherElements takes two inputs `data` and `indices` of the same rank r >= 1   and an optional attribute `axis` that identifies an axis of `data`   (by default, the outer-most axis, that is axis 0). It is an indexing operation   that produces its output by indexing into the input data tensor at index   positions determined by elements of the `indices` tensor.   Its output shape is the same as the shape of `indices` and consists of one value   (gathered from the `data`) for each element in `indices`.   For instance, in the 3-D case (r = 3), the output produced is determined   by the following equations:   ```   out[i][j][k] = input[index[i][j][k]][j][k] if axis = 0,   out[i][j][k] = input[i][index[i][j][k]][k] if axis = 1,   out[i][j][k] = input[i][j][index[i][j][k]] if axis = 2,   ```   This operator is also the inverse of ScatterElements. It is similar to Torch's gather operation.   Example 1:   ```   data = [       [1, 2],       [3, 4],   ]   indices = [       [0, 0],       [1, 0],   ]   axis = 1   output = [       [1, 1],       [4, 3],   ]   ```   Example 2:   ```   data = [       [1, 2, 3],       [4, 5, 6],       [7, 8, 9],   ]   indices = [       [1, 2, 0],       [2, 0, 0],   ]   axis = 0   output = [       [4, 8, 3],       [7, 2, 3],   ]   ```","data,indices","T,Tind","Tensor of rank r >= 1.;Tensor of int32/int64 indices, with the same rank r as the input. All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.",output,T,Tensor of the same shape as indices.,axis,int (default is 0),"Which axis to gather on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).",unknown
GatherND,"13, 11, 12","Given `data` tensor of rank `r` >= 1, `indices` tensor of rank `q` >= 1, and `batch_dims` integer `b`, this operator gathers   slices of `data` into an output tensor of rank `q + r - indices_shape[-1] - 1 - b`.   `indices` is an q-dimensional integer tensor, best thought of as a `(q-1)`-dimensional tensor of index-tuples into `data`,   where each element defines a slice of `data`   `batch_dims` (denoted as `b`) is an integer indicating the number of batch dimensions, i.e the leading `b` number of dimensions of   `data` tensor and `indices` are representing the batches, and the gather starts from the `b+1` dimension.   Some salient points about the inputs' rank and shape:   1) r >= 1 and q >= 1 are to be honored. There is no dependency condition to be met between ranks `r` and `q`   2) The first `b` dimensions of the shape of `indices` tensor and `data` tensor must be equal.   3) b < min(q, r) is to be honored.   4) The `indices_shape[-1]` should have a value between 1 (inclusive) and rank `r-b` (inclusive)   5) All values in `indices` are expected to be within bounds [-s, s-1] along axis of size `s` (i.e.) `-data_shape[i] <= indices[...,i] <= data_shape[i] - 1`.      It is an error if any of the index values are out of bounds.   The output is computed as follows:   The output tensor is obtained by mapping each index-tuple in the `indices` tensor to the corresponding slice of the input `data`.   1) If `indices_shape[-1] > r-b` => error condition   2) If `indices_shape[-1] == r-b`, since the rank of `indices` is `q`, `indices` can be thought of as `N` `(q-b-1)`-dimensional tensors      containing 1-D tensors of dimension `r-b`, where `N` is an integer equals to the product of 1 and all the elements in the batch dimensions      of the indices_shape. Let us think of each such `r-b` ranked tensor as `indices_slice`. Each *scalar value* corresponding to `data[0:b-1,indices_slice]`      is filled into the corresponding location of the `(q-b-1)`-dimensional tensor to form the `output` tensor (Example 1 below)   3) If `indices_shape[-1] < r-b`, since the rank of `indices` is `q`, `indices` can be thought of as `N` `(q-b-1)`-dimensional tensor      containing 1-D tensors of dimension `< r-b`. Let us think of each such tensors as `indices_slice`. Each *tensor slice* corresponding      to `data[0:b-1, indices_slice , :]` is filled into the corresponding location of the `(q-b-1)`-dimensional tensor      to form the `output` tensor (Examples 2, 3, 4 and 5 below)   This operator is the inverse of `ScatterND`.   **Example 1**   ```   batch_dims = 0   data    = [[0,1],[2,3]]   # data_shape    = [2, 2]   indices = [[0,0],[1,1]]   # indices_shape = [2, 2]   output  = [0,3]           # output_shape  = [2]   ```   **Example 2**   ```   batch_dims = 0   data    = [[0,1],[2,3]]  # data_shape    = [2, 2]   indices = [[1],[0]]      # indices_shape = [2, 1]   output  = [[2,3],[0,1]]  # output_shape  = [2, 2]   ```   **Example 3**   ```   batch_dims = 0   data    = [[[0,1],[2,3]],[[4,5],[6,7]]] # data_shape    = [2, 2, 2]   indices = [[0,1],[1,0]]                 # indices_shape = [2, 2]   output  = [[2,3],[4,5]]                 # output_shape  = [2, 2]   ```   **Example 4**   ```   batch_dims = 0   data    = [[[0,1],[2,3]],[[4,5],[6,7]]] # data_shape    = [2, 2, 2]   indices = [[[0,1]],[[1,0]]]             # indices_shape = [2, 1, 2]   output  = [[[2,3]],[[4,5]]]             # output_shape  = [2, 1, 2]   ```   **Example 5**   ```   batch_dims = 1   data    = [[[0,1],[2,3]],[[4,5],[6,7]]] # data_shape    = [2, 2, 2]   indices = [[1],[0]]                     # indices_shape = [2, 1]   output  = [[2,3],[4,5]]                 # output_shape  = [2, 2]   ```","data,indices","T,tensor(int64)","Tensor of rank r >= 1.;Tensor of rank q >= 1. All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.",output,T,Tensor of rank q + r - indices_shape[-1] - 1.,batch_dims,int (default is 0),The number of batch dimensions. The gather of indexing starts from dimension of data[batch_dims:],unknown
Gelu,20,"Gelu takes one input data (Tensor<T>) and produces one   output data (Tensor<T>) where the gaussian error linear units function,   $y = 0.5 * x * (1 + erf(x/sqrt(2)))$ is applied to the tensor elementwise.   If the attribute ""approximate"" is set to ""tanh"", the function estimation,   $y = 0.5 * x * (1 + Tanh(sqrt(2/\pi) * (x + 0.044715 * x^3)))$ is used and applied   to the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,approximate,string (default is none),"Gelu approximation algorithm: `""tanh""`, `""none""`(default).`""none""`: do not use approximation.`""tanh""`: use tanh approximation.",unknown
Gemm,"13, 1, 6, 7, 9, 11","General Matrix multiplication:   https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3   * A' = transpose(A) if transA else A   * B' = transpose(B) if transB else B   Compute Y = alpha * A' * B' + beta * C, where input tensor A has shape (M, K) or (K, M),   input tensor B has shape (K, N) or (N, K), input tensor C is broadcastable to shape (M, N),   and output tensor Y has shape (M, N). A will be transposed before doing the   computation if attribute transA is non-zero, same for B and transB.   This operator supports **unidirectional broadcasting** (tensor C should be unidirectional broadcastable to tensor A * B); for more details please check [the doc](Broadcasting.md).   This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.","A,B,C","T,T,T","Input tensor A. The shape of A should be (M, K) if transA is 0, or (K, M) if transA is non-zero.;Input tensor B. The shape of B should be (K, N) if transB is 0, or (N, K) if transB is non-zero.;Optional input tensor C. If not specified, the computation is done as if C is a scalar 0. The shape of C should be unidirectional broadcastable to (M, N).",Y,T,"Output tensor of shape (M, N).","alpha,beta,transA,transB","float (default is 1.0),float (default is 1.0),int (default is 0),int (default is 0)",Scalar multiplier for the product of input tensors A * B.;Scalar multiplier for input tensor C.;Whether A should be transposed;Whether B should be transposed,cube
GlobalAveragePool,"22, 1",GlobalAveragePool consumes an input tensor X and applies average pooling across    the values in the same channel. This is equivalent to AveragePool with kernel size    equal to the spatial dimension of input tensor.,X,T,"Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",Y,T,"Output data tensor from pooling across the input tensor. The output tensor has the same rank as the input. The first two dimensions of output shape are the same as the input (N x C), while the other dimensions are all 1.",,,,unknown
GlobalLpPool,"22, 1, 2",GlobalLpPool consumes an input tensor X and applies lp pool pooling across    the values in the same channel. This is equivalent to LpPool with kernel size    equal to the spatial dimension of input tensor.,X,T,"Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",Y,T,"Output data tensor from pooling across the input tensor. The output tensor has the same rank as the input. The first two dimensions of output shape are the same as the input (N x C), while the other dimensions are all 1.",p,int (default is 2),p value of the Lp norm used to pool over the input data.,unknown
GlobalMaxPool,"22, 1",GlobalMaxPool consumes an input tensor X and applies max pooling across    the values in the same channel. This is equivalent to MaxPool with kernel size    equal to the spatial dimension of input tensor.,X,T,"Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",Y,T,"Output data tensor from pooling across the input tensor. The output tensor has the same rank as the input. The first two dimensions of output shape are the same as the input (N x C), while the other dimensions are all 1.",,,,unknown
Greater,"13, 1, 7, 9","Returns the tensor resulted from performing the `greater` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,unknown
GreaterOrEqual,"16, 12","Returns the tensor resulted from performing the `greater_equal` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,unknown
GridSample,"22, 16, 20","Given an input `X` and a flow-field `grid`, computes the output `Y` using `X` values and pixel locations from the `grid`.   For spatial input `X` with shape (N, C, H, W), the `grid` will have shape (N, H_out, W_out, 2),   the output `Y` will have shape (N, C, H_out, W_out). For volumetric input `X` with shape (N, C, D, H, W),   the `grid` will have shape (N, D_out, H_out, W_out, 3), the output `Y` will have shape (N, C, D_out, H_out, W_out).   More generally, for an input `X` of rank r+2 with shape (N, C, d1, d2, ..., dr),   the `grid` will have shape (N, D1_out, D2_out, ..., Dr_out, r), the output `Y` will have shape (N, C, D1_out, D2_out, ..., Dr_out).   The tensor `X` contains values at centers of square pixels (voxels, etc) locations such as (n, c, d1_in, d2_in, ..., dr_in).   The (n, d1_out, d2_out, ..., dr_out, :) values from the tensor `grid` are the normalized positions for interpolating the values   at the (n, c, d1_out, d2_out, ..., dr_out) locations from the output tensor `Y` using a specified interpolation method (the mode)   and a padding mode (for `grid` positions falling outside the 2-dimensional image).   For example, the values in `grid[n, h_out, w_out, :]` are size-2 vectors specifying normalized positions in the 2-dimensional space of `X`.   They are used to interpolate output values of `Y[n, c, h_out, w_out]`.   The GridSample operator is often used in doing grid generator and sampler in the   [Spatial Transformer Networks](https://arxiv.org/abs/1506.02025).   See also in [torch.nn.functional.grid_sample](https://pytorch.org/docs/stable/generated/torch.nn.functional.grid_sample.html).","X,grid","T1,T2","Input tensor of rank r+2 that has shape (N, C, D1, D2, ..., Dr), where N is the batch size, C is the number of channels, D1, D2, ..., Dr are the spatial dimensions.;Input offset of shape (N, D1_out, D2_out, ..., Dr_out, r), where D1_out, D2_out, ..., Dr_out are the spatial dimensions of the grid and output, and r is the number of spatial dimensions. Grid specifies the sampling locations normalized by the input spatial dimensions. Therefore, it should have most values in the range of [-1, 1]. If the grid has values outside the range of [-1, 1], the corresponding outputs will be handled as defined by padding_mode. Following computer vision convention, the coordinates in the length-r location vector are listed from the innermost tensor dimension to the outermost, the opposite of regular tensor indexing.",Y,T1,"Output tensor of rank r+2 that has shape (N, C, D1_out, D2_out, ..., Dr_out) of the sampled values. For integer input types, intermediate values are computed as floating point and cast to integer at the end.","align_corners,mode,padding_mode","int (default is 0),string (default is linear),string (default is zeros)","If align_corners=1, the extrema (-1 and 1) are considered as referring to the center points of the input's corner pixels (voxels, etc.). If align_corners=0, they are instead considered as referring to the corner points of the input's corner pixels (voxels, etc.), making the sampling more resolution agnostic.;Three interpolation modes: linear (default), nearest and cubic. The ""linear"" mode includes linear and N-linear interpolation modes depending on the number of spatial dimensions of the input tensor (i.e. linear for 1 spatial dimension, bilinear for 2 spatial dimensions, etc.). The ""cubic"" mode also includes N-cubic interpolation modes following the same rules. The ""nearest"" mode rounds to the nearest even index when the sampling point falls halfway between two indices.;Support padding modes for outside grid values: `zeros`(default), `border`, `reflection`. zeros: use 0 for out-of-bound grid locations, border: use border values for out-of-bound grid locations, reflection: use values at locations reflected by the border for out-of-bound grid locations. If index 0 represents the margin pixel, the reflected value at index -1 will be the same as the value at index 1. For location far away from the border, it will keep being reflected until becoming in bound. If pixel location x = -3.5 reflects by border -1 and becomes x' = 1.5, then reflects by border 1 and becomes x'' = 0.5.",unknown
GroupNormalization,"21, 18","A GroupNormalization function. Carries out group normalization as described in   the paper https://arxiv.org/abs/1803.08494   This operator transforms input according to   ```   y = scale * (x - mean) / sqrt(variance + epsilon) + bias,   ```   where the mean and variance are computed per instance per group of channels, and   `scale` and `bias` should be specified for each channel. The number of   groups `num_groups` should be divisible by the number of channels so that there are   an equal number of channels per group.   The overall computation has two stages: the first stage normalizes the elements to   have zero mean and unit variance for each instance in each group, and the second   stage scales and shifts the results of the first stage. The floating-point precision   used in the first stage is determined by the `stash_type` attribute. For example,   if `stash_type` is 1, the operator casts all input variables to 32-bit float,   performs the computation, and finally casts the normalized results back to the   original type of `X`. The second stage does not depend on `stash_type`.   When the number of groups is the same as the number of channels, this operator is   equivalent to InstanceNormalization. When there is only one group, this operator   is equivalent to LayerNormalization.","X,scale,bias","T,T,T","Input data tensor. Dimensions for image cases are `(N x C x H x W)`, where `N` is the batch size, `C` is the number of channels, and `H` and `W` are the height and width of the data. Statistics are computed for every group of channels over `C`, `H`, and `W`. For non-image cases, the dimensions are in the form of `(N x C x D1 x D2 ... Dn)`.;Scale tensor of shape `(C)`.;Bias tensor of shape `(C)`.",Y,T,The output tensor of the same shape as `X`.,"epsilon,num_groups,stash_type","float (default is 1e-05),int (required),int (default is 1)",The epsilon value to use to avoid division by zero.;The number of groups of channels. It should be a divisor of the number of channels `C`.;The floating-point precision used in stage one of the computation.,unknown
HammingWindow,17,Generates a Hamming window as described in the paper https://ieeexplore.ieee.org/document/1455106.,size,T1,A scalar value indicating the length of the window.,output,T2,A Hamming window with length: size. The output has the shape: [size].,"output_datatype,periodic","int (default is 1),int (default is 1)","The data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T2. The default value is 1 = FLOAT.;If 1, returns a window to be used as periodic function. If 0, return a symmetric window. When 'periodic' is specified, hann computes a window of length size + 1 and returns the first size points. The default value is 1.",unknown
HannWindow,17,Generates a Hann window as described in the paper https://ieeexplore.ieee.org/document/1455106.,size,T1,A scalar value indicating the length of the window.,output,T2,A Hann window with length: size. The output has the shape: [size].,"output_datatype,periodic","int (default is 1),int (default is 1)","The data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T2. The default value is 1 = FLOAT.;If 1, returns a window to be used as periodic function. If 0, return a symmetric window. When 'periodic' is specified, hann computes a window of length size + 1 and returns the first size points. The default value is 1.",unknown
HardSigmoid,"22, 1, 6","HardSigmoid takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the HardSigmoid function, y = max(0, min(1, alpha * x + beta)),   is applied to the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,"alpha,beta","float (default is 0.2),float (default is 0.5)",Value of alpha.;Value of beta.,vector
HardSwish,"22, 14","HardSwish takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where   the HardSwish function, y = x * max(0, min(1, alpha * x + beta)) = x * HardSigmoid<alpha, beta>(x),   where alpha = 1/6 and beta = 0.5, is applied to the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,,,,unknown
Hardmax,"13, 1, 11","The operator computes the hardmax values for the given input:    Hardmax(element in input, axis) = 1 if the element is the first maximum value along the specified axis, 0 otherwise   The ""axis"" attribute indicates the dimension along which Hardmax   will be performed. The output tensor has the same shape   and contains the Hardmax values of the corresponding input.",input,T,The input tensor of rank >= axis.,output,T,The output values with the same shape as the input tensor.,axis,int (default is -1),"Describes the dimension Hardmax will be performed on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).",unknown
Identity,"23, 1, 13, 14, 16, 19, 21",Identity operator,input,V,Input tensor,output,V,Tensor to copy input into.,,,,unknown
If,"23, 1, 11, 13, 16, 19, 21",If conditional,cond,B,Condition for the if. The tensor must contain a single element.,outputs,V,"Values that are live-out to the enclosing scope. The return values in the `then_branch` and `else_branch` must be of the same data type. The `then_branch` and `else_branch` may produce tensors with the same element type and different shapes. If corresponding outputs from the then-branch and the else-branch have static shapes S1 and S2, then the shape of the corresponding output variable of the if-node (if present) must be compatible with both S1 and S2 as it represents the union of both possible shapes.For example, if in a model file, the first output of `then_branch` is typed float tensor with shape [2] and the first output of `else_branch` is another float tensor with shape [3], If's first output should have (a) no shape set, or (b) a shape of rank 1 with neither `dim_value` nor `dim_param` set, or (c) a shape of rank 1 with a unique `dim_param`. In contrast, the first output cannot have the shape [2] since [2] and [3] are not compatible.","else_branch,then_branch","graph (required),graph (required)",Graph to run if condition is false. Has N outputs: values you wish to be live-out to the enclosing scope. The number of outputs must match the number of outputs in the then_branch.;Graph to run if condition is true. Has N outputs: values you wish to be live-out to the enclosing scope. The number of outputs must match the number of outputs in the else_branch.,unknown
ImageDecoder,20,"Loads and decodes and image from a file. If it can't decode for any reason (e.g. corrupted encoded   stream, invalid format, it will return an empty matrix).   The following image formats are supported:   * BMP   * JPEG (note: Lossless JPEG support is optional)   * JPEG2000   * TIFF   * PNG   * WebP   * Portable image format (PBM, PGM, PPM, PXM, PNM)   Decoded images follow a channel-last layout: (Height, Width, Channels).   **JPEG chroma upsampling method:**   When upsampling the chroma components by a factor of 2, the pixels are linearly interpolated so that the   centers of the output pixels are 1/4 and 3/4 of the way between input pixel centers.   When rounding, 0.5 is rounded down and up at alternative pixels locations to prevent bias towards   larger values (ordered dither pattern).   Considering adjacent input pixels A, B, and C, B is upsampled to pixels B0 and B1 so that   ```   B0 = round_half_down((1/4) * A + (3/4) * B)   B1 = round_half_up((3/4) * B + (1/4) * C)   ```   This method,  is the default chroma upsampling method in the well-established libjpeg-turbo library,   also referred as ""smooth"" or ""fancy"" upsampling.",encoded_stream,T1,Encoded stream,image,T2,Decoded image,pixel_format,string (default is RGB),"Pixel format. Can be one of ""RGB"", ""BGR"", or ""Grayscale"".",unknown
InstanceNormalization,"22, 1, 6","Carries out instance normalization as described in the paper   https://arxiv.org/abs/1607.08022.   y = scale * (x - mean) / sqrt(variance + epsilon) + B,   where mean and variance are computed per instance per channel.","input,scale,B","T,T,T","Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.;The input 1-dimensional scale tensor of size C.;The input 1-dimensional bias tensor of size C.",output,T,The output tensor of the same shape as input.,epsilon,float (default is 1e-05),The epsilon value to use to avoid division by zero.,cube
IsInf,"20, 10",Map infinity to true and other values to false.,X,T1,input,Y,T2,output,"detect_negative,detect_positive","int (default is 1),int (default is 1)",(Optional) Whether map negative infinity to true. Default to 1 so that negative infinity induces true. Set this attribute to 0 if negative infinity should be mapped to false.;(Optional) Whether map positive infinity to true. Default to 1 so that positive infinity induces true. Set this attribute to 0 if positive infinity should be mapped to false.,unknown
IsNaN,"20, 9, 13",Returns which elements of the input are NaN.,X,T1,input,Y,T2,output,,,,unknown
LRN,"13, 1","Local Response Normalization proposed in the [AlexNet paper](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf).   It normalizes over local input regions.   The local region is defined across the channels. For an element `X[n, c, d1, ..., dk]` in a tensor   of shape `(N x C x D1 x D2, ..., Dk)`, its region is   `{X[n, i, d1, ..., dk] | max(0, c - floor((size - 1) / 2)) <= i <= min(C - 1, c + ceil((size - 1) / 2))}`.   `square_sum[n, c, d1, ..., dk] = sum(X[n, i, d1, ..., dk] ^ 2)`,   where `max(0, c - floor((size - 1) / 2)) <= i <= min(C - 1, c + ceil((size - 1) / 2))`.   `Y[n, c, d1, ..., dk] = X[n, c, d1, ..., dk] / (bias + alpha / size * square_sum[n, c, d1, ..., dk] ) ^ beta`",X,T,"Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].",Y,T,"Output tensor, which has the shape and type as input tensor","alpha,beta,bias,size","float (default is 0.0001),float (default is 0.75),float (default is 1.0),int (required)",Scaling parameter.;The exponent.;;The number of channels to sum over,cube
LSTM,"22, 1, 7, 14","Computes an one-layer LSTM. This operator is usually supported via some   custom implementation such as CuDNN.   Notations:   * `X` - input tensor   * `i` - input gate   * `o` - output gate   * `f` - forget gate   * `c` - cell gate   * `t` - time step (t-1 means previous time step)   * `W[iofc]` - W parameter weight matrix for input, output, forget, and cell gates   * `R[iofc]` - R recurrence weight matrix for input, output, forget, and cell gates   * `Wb[iofc]` - W bias vectors for input, output, forget, and cell gates   * `Rb[iofc]` - R bias vectors for input, output, forget, and cell gates   * `P[iof]`  - P peephole weight vector for input, output, and forget gates   * `WB[iofc]` - W parameter weight matrix for backward input, output, forget, and cell gates   * `RB[iofc]` - R recurrence weight matrix for backward input, output, forget, and cell gates   * `WBb[iofc]` - W bias vectors for backward input, output, forget, and cell gates   * `RBb[iofc]` - R bias vectors for backward input, output, forget, and cell gates   * `PB[iof]`  - P peephole weight vector for backward input, output, and forget gates   * `H` - Hidden state   * `num_directions` - 2 if direction == bidirectional else 1   Activation functions:   * Relu(x)                - max(0, x)   * Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})   * Sigmoid(x)             - 1/(1 + e^{-x})   NOTE: Below are optional   * Affine(x)              - alpha*x + beta   * LeakyRelu(x)           - x if x >= 0 else alpha * x   * ThresholdedRelu(x)     - x if x >= alpha else 0   * ScaledTanh(x)          - alpha*Tanh(beta*x)   * HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)   * Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)   * Softsign(x)            - x/(1 + |x|)   * Softplus(x)            - log(1 + e^x)   Equations (Default: f=Sigmoid, g=Tanh, h=Tanh):   * it = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Pi (.) Ct-1 + Wbi + Rbi)   * ft = f(Xt*(Wf^T) + Ht-1*(Rf^T) + Pf (.) Ct-1 + Wbf + Rbf)   * ct = g(Xt*(Wc^T) + Ht-1*(Rc^T) + Wbc + Rbc)   * Ct = ft (.) Ct-1 + it (.) ct   * ot = f(Xt*(Wo^T) + Ht-1*(Ro^T) + Po (.) Ct + Wbo + Rbo)   * Ht = ot (.) h(Ct)   This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.","X,W,R,B,sequence_lens,initial_h,initial_c,P","T,T,T,T,T1,T,T,T","The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.;The weight tensor for the gates. Concatenation of `W[iofc]` and `WB[iofc]` (if bidirectional) along dimension 0. The tensor has shape `[num_directions, 4*hidden_size, input_size]`.;The recurrence weight tensor. Concatenation of `R[iofc]` and `RB[iofc]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 4*hidden_size, hidden_size]`.;The bias tensor for input gate. Concatenation of `[Wb[iofc], Rb[iofc]]`, and `[WBb[iofc], RBb[iofc]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 8*hidden_size]`. Optional: If not specified - assumed to be 0.;Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.;Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.;Optional initial value of the cell. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.;The weight tensor for peepholes. Concatenation of `P[iof]` and `PB[iof]` (if bidirectional) along dimension 0. It has shape `[num_directions, 3*hidde_size]`. Optional: If not specified - assumed to be 0.","Y,Y_h,Y_c","T,T,T","A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`.;The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.;The last output value of the cell. It has shape `[num_directions, batch_size, hidden_size]`.","activation_alpha,activation_beta,activations,clip,direction,hidden_size,input_forget,layout","list of floats,list of floats,list of strings,float,string (default is forward),int,int (default is 0),int (default is 0)","Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.;Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.;A list of 3 (or 6 if bidirectional) activation functions for input, output, forget, cell, and hidden. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.;Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.;Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.;Number of neurons in the hidden layer;Couple the input and forget gates if 1.;The shape format of inputs X, initial_h, initial_c and outputs Y, Y_h, Y_c. If 0, the following shapes are expected: X.shape = [seq_length, batch_size, input_size], Y.shape = [seq_length, num_directions, batch_size, hidden_size], initial_h.shape = Y_h.shape = initial_c.shape = Y_c.shape = [num_directions, batch_size, hidden_size]. If 1, the following shapes are expected: X.shape = [batch_size, seq_length, input_size], Y.shape = [batch_size, seq_length, num_directions, hidden_size], initial_h.shape = Y_h.shape = initial_c.shape = Y_c.shape = [batch_size, num_directions, hidden_size].",cube
LayerNormalization,17,"This is layer normalization defined in ONNX as function.         The overall computation can be split into two stages.         The first stage is standardization, which makes the         normalized elements have zero mean and unit variances.         The computation required by standardization can be         described by the following equations.         ```         Mean = ReduceMean<axes=normalized_axes>(X)         D = Sub(X, Mean)         DD = Mul(D, D)         Var = ReduceMean<axes=normalized_axes>(DD)         VarEps = Add(Var, epsilon)         StdDev = Sqrt(VarEps)         InvStdDev = Reciprocal(StdDev)         Normalized = Mul(D, InvStdDev)         ```         where `normalized_axes` is `[axis, ..., rank of X - 1]`.         The variables `Var` and `StdDev` stand for variance and         standard deviation, respectively. The second output is         `Mean` and the last one is `InvStdDev`.         Depending on `stash_type` attribute, the actual computation         must happen in different floating-point precision.         For example, if `stash_type` is 1, this operator casts         all input variables to 32-bit float, perform the computation, and         finally cast `Normalized` back to the original type of `X`.         The second stage then scales and shifts the outcome of the         first stage using         ```         NormalizedScaled = Mul(Normalized, Scale)         Y = Add(NormalizedScaled, B)         ```         The second stage doesn't depends on `stash_type`.         All equations are in [this syntax](https://github.com/onnx/onnx/blob/main/docs/Syntax.md).         The same variable (i.e., input, output, and attribute) uses         the same name in the equations above and this operator's definition.         Let `d[i]` indicate the i-th dimension of `X`.         If `X`'s shape is `[d[0], ..., d[axis-1], d[axis], ..., d[rank-1]]`,         the shape of `Mean` and `InvStdDev` is `[d[0], ..., d[axis-1], 1, ..., 1]`.         `Y` and `X` have the same shape. This operator supports unidirectional broadcasting         (tensors `Scale` and `B` should be unidirectional broadcastable to tensor `X`);         for more details please check [the doc](Broadcasting.md).","X,Scale,B","T,T,T",Tensor to be normalized.;Scale tensor.;Bias tensor.,"Y,Mean,InvStdDev","T,U,U",Normalized tensor.;Saved mean used during training to speed up gradient computation;Saved inverse standard deviation used during training to speed up gradient computation.,"axis,epsilon,stash_type","int (default is -1),float (default is 1e-05),int (default is 1)","The first normalization dimension. If rank(X) is r, axis' allowed range is [-r, r). Negative value means counting dimensions from the back.;The epsilon value to use to avoid division by zero.;Type of Mean and InvStdDev. This also specifies stage one's computation precision.",unknown
LeakyRelu,"16, 1, 6","LeakyRelu takes input data (Tensor<T>) and an argument alpha, and produces one   output data (Tensor<T>) where the function `f(x) = alpha * x for x < 0`,   `f(x) = x for x >= 0`, is applied to the data tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,alpha,float (default is 0.01),Coefficient of leakage.,vector
Less,"13, 1, 7, 9","Returns the tensor resulted from performing the `less` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,unknown
LessOrEqual,"16, 12","Returns the tensor resulted from performing the `less_equal` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,unknown
Log,"13, 1, 6","Calculates the natural log of the given input tensor, element-wise.",input,T,Input tensor,output,T,The natural log of the input tensor computed element-wise,,,,vector
LogSoftmax,"13, 1, 11","The operator computes the log of softmax values for the given input:    LogSoftmax(input, axis) = Log(Softmax(input, axis=axis))   The ""axis"" attribute indicates the dimension along which LogSoftmax   will be performed. The output tensor has the same shape   and contains the LogSoftmax values of the corresponding input.",input,T,The input tensor of rank >= axis.,output,T,The output values with the same shape as the input tensor.,axis,int (default is -1),"Describes the dimension LogSoftmax will be performed on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).",unknown
Loop,"23, 1, 11, 13, 16, 19, 21","Generic Looping construct. This loop has multiple termination conditions:   1) Trip count. Iteration count specified at runtime. Set by      specifying the input M. Optional. Set to empty string to omit.      Note that a static trip count (specified at graph construction time) can be      specified by passing in a constant node for input M.   2) Loop termination condition. This is an input to the op that determines      whether to run the first iteration and also a loop-carried dependency for      the body graph. The body graph must yield a value for the condition variable,      whether this input is provided or not.   This table summarizes the operating modes of this operator with equivalent   C-style code:   Operator inputs defined as (max_trip_count, condition_var).   * input ("""", """"):           for (int i=0; ; ++i) {             cond = ... // Note this value is ignored, but is required in the body           }   * input ("""", cond) // Note this is analogous to a while loop           bool cond = ...;           for (int i=0; cond; ++i) {             cond = ...;           }   * input ("""", 1) // Note this is analogous to a do-while loop           bool cond = true           for (int i=0; cond; ++i) {             cond = ...;           }   * input (trip_count, """") // Note this is analogous to a for loop           int trip_count = ...           for (int i=0; i < trip_count; ++i) {             cond = ...; // ignored           }   * input (trip_count, cond)           int trip_count = ...;           bool cond = ...;           for (int i=0; i < trip_count && cond; ++i) {             cond = ...;           }   *Sample usage - cond as well as trip count*       graph predict-net {         %a = Constant[value = <Scalar Tensor [3]>]()         %b = Constant[value = <Scalar Tensor [6]>]()         %keepgoing = Constant[value = <Scalar Tensor [1]>]()         %max_trip_count = Constant[value = <Scalar Tensor [10]>]()         %keepgoing_out, %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing, %b)         return       }       graph body-net (         %i[INT32, scalar]           // iteration number         %keepgoing_in[BOOL, scalar] // incoming loop-termination-condition; not used         %b_in[INT32, scalar]        // incoming value of loop-carried-dependency b       ) {         %my_local = Add(%a, %b_in)         %b_out = Sub(%a, %b_in) // outgoing value of loop-carried-dependency b         %keepgoing_out = Greater(%my_local, %b_out) // outgoing loop-termination-condition         %user_defined_val = Add(%b_in, %b_in) // scan-output value to be accumulated         return %keepgoing_out, %b_out, %user_defined_val       }   *Sample equivalent C code*       {         /* User-defined code (enclosing scope) */         int a = 3, b = 6;         bool keepgoing = true; // Analogous to input cond         /* End user-defined code */         /* Implicitly-defined code */         const int max_trip_count = 10; // Analogous to input M         int user_defined_vals[]; // Imagine this is resizable         /* End implicitly-defined code */         /* initialize loop-carried variables and scan-output variables */         bool keepgoing_out = keepgoing         int b_out = b         for (int i=0; i < max_trip_count && keepgoing_out; ++i) {           /* Implicitly-defined code: bind actual parameter values              to formal parameter variables of loop-body */           bool keepgoing_in = keepgoing_out;           bool b_in = b_out;           /* User-defined code (loop body) */           int my_local = a + b_in; // Reading value ""a"" from the enclosing scope is fine           b_out = a - b_in;           keepgoing_out = my_local > b_out;           user_defined_val = b_in + b_in; // b_in and b_out are different variables           /* End user-defined code */           /* Implicitly defined-code */           user_defined_vals[i] = user_defined_val // accumulate scan-output values         }         // int t = my_local; // Can't do this. my_local is not accessible here.         // The values below are bound to the output variables of the loop and therefore accessible         // b_out; user_defined_vals; keepgoing_out;       }   There are several things of note in this code snippet:   1) Values from the enclosing scope (i.e. variable ""a"" here) are in scope and can      be referenced in the inputs of the loop.   2) Any values computed in the loop body that needs to be used in a subsequent      iteration or after the loop are modelled using a pair of variables in the loop-body,      consisting of an input variable (eg., b_in) and an output variable (eg., b_out).      These are referred to as loop-carried dependences. The loop operation node      supplies the input value of the input variable for the first iteration, and      returns the output value of the output variable produced by the final      iteration.   3) Scan_output variables are used to implicitly concatenate values computed across      all the iterations. In the above example, the value of user_defined_val computed      over all iterations are concatenated and returned as the value of user_defined_vals      after the loop.   4) Values created in the body cannot be accessed in the enclosing scope,      except using the mechanism described above.   Note that the semantics of this op support ""diagonal"" or ""wavefront"" execution.   (See Step 3 here for an example:   https://devblogs.nvidia.com/optimizing-recurrent-neural-networks-cudnn-5/).   Frontends should emit multi-layer RNNs as a series of While operators (with   time being the inner looping dimension), with each successive layer consuming   the scan_outputs from the previous layer, possibly going through several   point-wise operators (e.g. dropout, residual connections, linear layer).   The input/output of subgraph (produced by loop node) matching is based on order instead of name. The implementation will figure out the names based on this order.","M,cond,v_initial","I,B,V",A maximum trip-count for the loop specified at runtime. Optional. Pass empty string to skip.;A boolean termination condition. Optional. Pass empty string to skip.;The initial values of any loop-carried dependencies (values that change across loop iterations),v_final_and_scan_outputs,V,Final N loop carried dependency values then K scan_outputs. Scan outputs must be Tensors.,body,graph (required),"The graph run each iteration. It has 2+N inputs: (iteration_num, condition, loop carried dependencies...). It has 1+N+K outputs: (condition, loop carried dependencies..., scan_outputs...). Each scan_output is created by concatenating the value of the specified output value at the end of each iteration of the loop. It is an error if the dimensions or data type of these scan_outputs change across loop iterations.",unknown
LpNormalization,"22, 1","Given a matrix, apply Lp-normalization along the provided axis.",input,T,Input matrix,output,T,Matrix after normalization,"axis,p","int (default is -1),int (default is 2)","The axis on which to apply normalization, -1 mean last axis.;The order of the normalization, only 1 or 2 are supported.",unknown
LpPool,"22, 1, 2, 11, 18","LpPool consumes an input tensor X and applies Lp pooling across    the tensor according to kernel sizes, stride sizes, and pad lengths.    Lp pooling consisting of computing the Lp norm on all values of a subset    of the input tensor according to the kernel size and downsampling the    data into the output tensor Y for further processing. The output spatial shape will be following:    ```    output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - {kernelSpatialShape}) / strides_spatial_shape[i] + 1)    ```    or    ```    output_spatial_shape[i] = ceil((input_spatial_shape[i] + pad_shape[i] - {kernelSpatialShape}) / strides_spatial_shape[i] + 1)    ```    if ceil_mode is enabled `pad_shape[i]` is the sum of pads along axis `i`.    `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:    ```    VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - {kernelSpatialShape} + 1) / strides_spatial_shape[i])    SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])    ```    And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:    ```    pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + {kernelSpatialShape} - input_spatial_shape[i]    ```",X,T,"Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",Y,T,"Output data tensor from Lp pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes.","auto_pad,ceil_mode,dilations,kernel_shape,p,pads,strides","string (default is NOTSET),int (default is 0),list of ints,list of ints (required),int (default is 2),list of ints,list of ints","auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that `output_shape[i] = ceil(input_shape[i] / strides[i])` for each axis `i`. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.;Whether to use ceil or floor (default) to compute the output shape.;dilation value along each spatial axis of the filter. If not present, the dilation defaults is 1 along each spatial axis.;The size of the kernel along each axis.;p value of the Lp norm used to pool over the input data.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.;Stride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",unknown
MatMul,"13, 1, 9",Matrix product that behaves like [numpy.matmul](https://numpy.org/doc/stable/reference/generated/numpy.matmul.html).,"A,B","T,T",N-dimensional matrix A;N-dimensional matrix B,Y,T,Matrix multiply results from A * B,,,,cube
MatMulInteger,10,Matrix product that behaves like [numpy.matmul](https://numpy.org/doc/stable/reference/generated/numpy.matmul.html).   The production MUST never overflow. The accumulation may overflow if and only if in 32 bits.,"A,B,a_zero_point,b_zero_point","T1,T2,T1,T2","N-dimensional matrix A;N-dimensional matrix B;Zero point tensor for input 'A'. It's optional and default value is 0. It could be a scalar or N-D tensor. Scalar refers to per tensor quantization whereas N-D refers to per row quantization. If the input is 2D of shape [M, K] then zero point tensor may be an M element vector [zp_1, zp_2, ..., zp_M]. If the input is N-D tensor with shape [D1, D2, M, K] then zero point tensor may have shape [D1, D2, M, 1].;Zero point tensor for input 'B'. It's optional and default value is 0. It could be a scalar or a N-D tensor, Scalar refers to per tensor quantization whereas N-D refers to per col quantization. If the input is 2D of shape [K, N] then zero point tensor may be an N element vector [zp_1, zp_2, ..., zp_N]. If the input is N-D tensor with shape [D1, D2, K, N] then zero point tensor may have shape [D1, D2, 1, N].",Y,T3,Matrix multiply results from A * B,,,,unknown
Max,"13, 1, 6, 8, 12","Element-wise max of each of the input tensors (with Numpy-style broadcasting support).   All inputs and outputs must have the same data type.   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).",data_0,T,List of tensors for max.,max,T,Output tensor.,,,,vector
MaxPool,"22, 1, 8, 10, 11, 12","MaxPool consumes an input tensor X and applies max pooling across    the tensor according to kernel sizes, stride sizes, and pad lengths.    max pooling consisting of computing the max on all values of a    subset of the input tensor according to the kernel size and downsampling the    data into the output tensor Y for further processing. The output spatial shape is calculated differently    depending on whether explicit padding is used, where pads is employed, or auto padding is used, where auto_pad is utilized.    With explicit padding (https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html?highlight=maxpool#torch.nn.MaxPool2d):    ```    output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - dilation[i] * (kernel_shape[i] - 1) - 1) / strides_spatial_shape[i] + 1)    ```    or    ```    output_spatial_shape[i] = ceil((input_spatial_shape[i] + pad_shape[i] - dilation[i] * (kernel_shape[i] - 1) - 1) / strides_spatial_shape[i] + 1)    ```    if ceil_mode is enabled. `pad_shape[i]` is the sum of pads along axis `i`. Sliding windows that would start in the right padded region are ignored.    `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following when ceil_mode is enabled:    ```    VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - ((kernel_spatial_shape[i] - 1) * dilations[i] + 1) + 1) / strides_spatial_shape[i])    SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])    ```    or when ceil_mode is disabled (https://www.tensorflow.org/api_docs/python/tf/keras/layers/AveragePooling2D):    ```    VALID: output_spatial_shape[i] = floor((input_spatial_shape[i] - ((kernel_spatial_shape[i] - 1) * dilations[i] + 1)) / strides_spatial_shape[i]) + 1    SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = floor((input_spatial_shape[i] - 1) / strides_spatial_shape[i]) + 1    ```    And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:    ```    pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + ((kernel_spatial_shape[i] - 1) * dilations[i] + 1) - input_spatial_shape[i]    ```    The output of each pooling window is maximum number of elements exclude pad.",X,T,"Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].","Y,Indices","T,I","Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used;Indices tensor from max pooling across the input tensor. The dimensions of indices are the same as output tensor. The values in indices of are the indices of the selected values during pooling. The indices are computed as flatten 1-D tensor, and the indices do not consider padding. So the values in indices are in [0, N x C x D1 x ... x Dn).","auto_pad,ceil_mode,dilations,kernel_shape,pads,storage_order,strides","string (default is NOTSET),int (default is 0),list of ints,list of ints (required),list of ints,int (default is 0),list of ints","auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that `output_shape[i] = ceil(input_shape[i] / strides[i])` for each axis `i`. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.;Whether to use ceil or floor (default) to compute the output shape.;Dilation value along each spatial axis of filter. If not present, the dilation defaults to 1 along each spatial axis.;The size of the kernel along each axis.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.;The storage order of the tensor. 0 is row major, and 1 is column major. This attribute is used only to convert an n-tuple index value into a single integer value for producing the second output.;Stride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",unknown
MaxRoiPool,"22, 1","ROI max pool consumes an input tensor X and region of interests (RoIs) to    apply max pooling across each RoI, to produce output 4-D tensor of shape    (num_rois, channels, pooled_shape[0], pooled_shape[1]).","X,rois","T,T","Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data.;RoIs (Regions of Interest) to pool over. Should be a 2-D tensor of shape (num_rois, 5) given as [[batch_id, x1, y1, x2, y2], ...].",Y,T,"RoI pooled output 4-D tensor of shape (num_rois, channels, pooled_shape[0], pooled_shape[1]).","pooled_shape,spatial_scale","list of ints (required),float (default is 1.0)","ROI pool output shape (height, width).;Multiplicative spatial scale factor to translate ROI coordinates from their input scale to the scale used when pooling.",unknown
MaxUnpool,"22, 9, 11","MaxUnpool essentially computes the partial inverse of the MaxPool op.    The input information to this op is typically the output information from a MaxPool op. The first    input tensor X is the tensor that needs to be unpooled, which is typically the pooled tensor (first output)    from MaxPool. The second input tensor, I, contains the indices to the (locally maximal) elements corresponding    to the elements in the first input tensor X. Input tensor I is typically the second output of the MaxPool op.    The third (optional) input is a tensor that specifies the output size of the unpooling operation.   MaxUnpool is intended to do 'partial' inverse of the MaxPool op. 'Partial' because all the non-maximal    values from the original input to MaxPool are set to zero in the output of the MaxUnpool op. Pooling    the result of an unpooling operation should give back the original input to the unpooling op.   MaxUnpool can produce the same output size for several input sizes, which makes unpooling op ambiguous.    The third input argument, output_size, is meant to disambiguate the op and produce output tensor of    known/predictable size.   In addition to the inputs, MaxUnpool takes three attributes, namely kernel_shape, strides, and pads,    which define the exact unpooling op. The attributes typically have the same values as the corresponding    pooling op that the unpooling op is trying to invert.","X,I,output_shape","T1,T2,T2","Input data tensor that has to be unpooled. This tensor is typically the first output of the MaxPool op.Dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non-image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].;Input data tensor containing the indices corresponding to elements in the first input tensor X.This tensor is typically the second output of the MaxPool op.Dimensions must be the same as input tensor X. The indices are linear, i.e. computed considering the tensor as flattened 1-D tensor, assuming row-major storage. Also, the linear indices should not consider padding. So the values in indices are in the range [0, N x C x D1 x ... x Dn).;The shape of the output can be explicitly set which will cause pads values to be auto generated. If 'output_shape' is specified, 'pads' values are ignored.",output,T1,Output data tensor that contains the result of the unpooling.,"kernel_shape,pads,strides","list of ints (required),list of ints,list of ints","The size of the kernel along each axis.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis. `pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.;Stride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",unknown
Mean,"13, 1, 6, 8","Element-wise mean of each of the input tensors (with Numpy-style broadcasting support).   All inputs and outputs must have the same data type.   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).",data_0,T,List of tensors for mean.,mean,T,Output tensor.,,,,unknown
MeanVarianceNormalization,"13, 9",A MeanVarianceNormalization Function: Perform mean variance normalization         on the input tensor X using formula: `(X-EX)/sqrt(E(X-EX)^2)`,X,T,Input tensor,Y,T,Output tensor,axes,"list of ints (default is ['0', '2', '3'])","A list of integers, along which to reduce. The default is to calculate along axes [0,2,3] for calculating mean and variance along each channel. Two variables with the same C-coordinate are associated with the same mean and variance.",unknown
MelWeightMatrix,17,"Generate a MelWeightMatrix that can be used to re-weight a Tensor containing a linearly sampled frequency spectra (from DFT or STFT) into num_mel_bins frequency information based on the [lower_edge_hertz, upper_edge_hertz] range on the mel scale.   This function defines the mel scale in terms of a frequency in hertz according to the following formula:       mel(f) = 2595 * log10(1 + f/700)   In the returned matrix, all the triangles (filterbanks) have a peak value of 1.0.   The returned MelWeightMatrix can be used to right-multiply a spectrogram S of shape [frames, num_spectrogram_bins] of linear scale spectrum values (e.g. STFT magnitudes) to generate a ""mel spectrogram"" M of shape [frames, num_mel_bins].","num_mel_bins,dft_length,sample_rate,lower_edge_hertz,upper_edge_hertz","T1,T1,T1,T2,T2","The number of bands in the mel spectrum.;The size of the original DFT. The size of the original DFT is used to infer the size of the onesided DFT, which is understood to be floor(dft_length/2) + 1, i.e. the spectrogram only contains the nonredundant DFT bins.;Samples per second of the input signal used to create the spectrogram. Used to figure out the frequencies corresponding to each spectrogram bin, which dictates how they are mapped into the mel scale.;Lower bound on the frequencies to be included in the mel spectrum. This corresponds to the lower edge of the lowest triangular band.;The desired top edge of the highest frequency band.",output,T3,The Mel Weight Matrix. The output has the shape: [floor(dft_length/2) + 1][num_mel_bins].,output_datatype,int (default is 1),The data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T3. The default value is 1 = FLOAT.,unknown
Min,"13, 1, 6, 8, 12","Element-wise min of each of the input tensors (with Numpy-style broadcasting support).   All inputs and outputs must have the same data type.   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).",data_0,T,List of tensors for min.,min,T,Output tensor.,,,,vector
Mish,"22, 18",Mish: A Self Regularized Non-Monotonic Neural Activation Function.   Perform the linear unit element-wise on the input tensor X using formula:   ```   mish(x) = x * tanh(softplus(x)) = x * tanh(ln(1 + e^{x}))   ```,X,T,Input tensor,Y,T,Output tensor,,,,unknown
Mod,"13, 10","Performs element-wise binary modulus (with Numpy-style broadcasting support).     The sign of the remainder is the same as that of the Divisor.     Mod operator can also behave like C fmod() or numpy.fmod. In this case, the sign of the remainder however, will be the same as the Dividend     (in contrast to integer mod). To force a behavior like numpy.fmod() an 'fmod' Attribute is provided.     This attribute is set to 0 by default causing the behavior to be like integer mod.     Setting this attribute to 1 causes the remainder to be calculated similar to that of numpy.fmod().     If the input type is floating point, then `fmod` attribute must be set to 1.     In case of dividend being zero, the results will be platform dependent.     This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",Dividend tensor;Divisor tensor,C,T,Remainder tensor,fmod,int (default is 0),Whether the operator should behave like fmod (default=0 meaning it will do integer mods); Set this to 1 to force fmod treatment,unknown
Mul,"14, 1, 6, 7, 13","Performs element-wise binary multiplication (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).   (Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.","A,B","T,T",First operand.;Second operand.,C,T,"Result, has same element type as two inputs",,,,vector
Multinomial,"22, 7",Generate a tensor of samples from a multinomial distribution according to the probabilities   of each of the possible outcomes.,input,T1,"Input tensor with shape [batch_size, class_size], where class_size is the number of all possible outcomes. Each value along the axis zero represents the unnormalized log-probability of each corresponding outcome in a batch.",output,T2,"Output tensor with shape [batch_size, sample_size], where sample_size is the number of times to sample. Each value along the axis zero represents the outcome of the corresponding sample in a batch.","dtype,sample_size,seed","int (default is 6),int (default is 1),float","(Optional) The data type for the elements of the output tensor, if not specified, we will use int32.;Number of times to sample.;(Optional) Seed to the random generator, if not specified we will auto generate one.",unknown
Neg,"13, 1, 6","Neg takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where each element flipped sign, y = -x, is applied to   the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,,,,vector
NegativeLogLikelihoodLoss,"22, 12, 13","A NegativeLogLikelihoodLoss operator computes (weighted) negative log likelihood loss.   Its ""input"" tensor has the shape of (N, C, d1, d2, ..., dk) where k >= 0.   The ""input"" tensor contains log-probabilities for input[n, :, d_1, d_2,..., d_k] being in a class of [0, C).   The operator's ""target"" input tensor has the shape of (N, d1, d2, ..., dk). It encodes class labels (one of C classes)   or it may contain a special value (indicated by an attribute ignore_index) for N x d1 x d2 x ... x dk samples.   The loss value for input[n, :, d_1, d_2,...d_k] being classified as class c = target[n][d_1][d_2]...[d_k] is computed as:   ```   loss[n][d_1][d_2]...[d_k] = -input[n][c][d_1][d_2]...[d_k].   ```   When an optional ""weight"" is provided, the sample loss is calculated as:   ```   loss[n][d_1][d_2]...[d_k] = -input[n][c][d_1][d_2]...[d_k] * weight[c].   ```   loss is zero for the case when target-value equals ignore_index.   ```   loss[n][d_1][d_2]...[d_k] = 0, when target[n][d_1][d_2]...[d_k] = ignore_index   ```   If ""reduction"" attribute is set to ""none"", the operator's output will be the above loss with shape (N, d1, d2, ..., dk).   If ""reduction"" attribute is set to ""mean"" (the default attribute value), the output loss is (weight) averaged:   ```   mean(loss), if ""weight"" is not provided,   ```   or if weight is provided,   ```   sum(loss) / sum(weight[target[n][d_1][d_2]...[d_k]]]), for all samples.   ```   If ""reduction"" attribute is set to ""sum"", the output is a scalar: `sum(loss)`.   See also https://pytorch.org/docs/stable/nn.html#torch.nn.NLLLoss.   Example 1:   ```   // negative log likelihood loss, ""none"" reduction   N, C, d1 = 2, 3, 2   input = [[[1.0, 2.0], [2.0, 2.0], [3.0, 2.0]],             [[0.0, 1.0], [2.0, 2.0], [1.0, 2]]]   target = [[2, 1], [0, 2]]   loss = np.zeros((N, d1))   for n in range(N):       for d_1 in range(d1):           c = target[n][d_1]           loss[n][d_1] = -input[n][c][d_1]   // print(loss)   // [[-3. -2.]   //  [-0. -2.]]   ```   Example 2:   ```   // weighted negative log likelihood loss, sum reduction   N, C, d1 = 2, 3, 2   input = [[[1.0, 2.0], [2.0, 2.0], [3.0, 2.0]],           [[0.0, 1.0], [2.0, 2.0], [1.0, 2]]]   target = [[2, 1], [0, 2]]   weight = [0.2, 0.3, 0.1]   loss = np.zeros((N, d1))   for n in range(N):       for d_1 in range(d1):           c = target[n][d_1]           loss[n][d_1] = -input[n][c][d_1] * weight[c]   loss = np.sum(loss)   // print(loss)   // -1.1   ```   Example 3:   ```   // weighted negative log likelihood loss, mean reduction   N, C, d1 = 2, 3, 2   input = [[[1.0, 2.0], [2.0, 2.0], [3.0, 2.0]],           [[0.0, 1.0], [2.0, 2.0], [1.0, 2]]]   target = [[2, 1], [0, 2]]   weight = [0.2, 0.3, 0.1]   loss = np.zeros((N, d1))   weight_total = 0   for n in range(N):       for d_1 in range(d1):           c = target[n][d_1]           loss[n][d_1] = -input[n][c][d_1] * weight[c]           weight_total = weight_total + weight[c]   loss = np.sum(loss) / weight_total   // print(loss)   // -1.57   ```","input,target,weight","T,Tind,T","Input tensor of shape (N, C) or (N, C, d1, d2, ..., dk).;Target tensor of shape (N) or (N, d1, d2, ..., dk). Target element value shall be in range of [0, C). If ignore_index is specified, it may have a value outside [0, C) and the target values should either be in the range [0, C) or have the value ignore_index.;Optional rescaling weight tensor. If given, it has to be a tensor of size C. Otherwise, it is treated as if having all ones.",loss,T,The negative log likelihood loss,"ignore_index,reduction","int,string (default is mean)","Specifies a target value that is ignored and does not contribute to the input gradient. It's an optional value.;Type of reduction to apply to loss: none, sum, mean (default). 'none': the output is the loss for each sample. 'sum': the output will be summed. 'mean': the sum of the output will be divided by the sum of applied weights.",unknown
NonMaxSuppression,"11, 10",Filter out boxes that have high intersection-over-union (IOU) overlap with previously selected boxes.   Bounding boxes with score less than score_threshold are removed. Bounding box format is indicated by attribute center_point_box.   Note that this algorithm is agnostic to where the origin is in the coordinate system and more generally is invariant to   orthogonal transformations and translations of the coordinate system; thus translating or reflections of the coordinate system   result in the same boxes being selected by the algorithm.   The selected_indices output is a set of integers indexing into the input collection of bounding boxes representing the selected boxes.   The bounding box coordinates corresponding to the selected indices can then be obtained using the Gather or GatherND operation.,"boxes,scores,max_output_boxes_per_class,iou_threshold,score_threshold","tensor(float),tensor(float),tensor(int64),tensor(float),tensor(float)","An input tensor with shape [num_batches, spatial_dimension, 4]. The single box data format is indicated by center_point_box.;An input tensor with shape [num_batches, num_classes, spatial_dimension];Integer representing the maximum number of boxes to be selected per batch per class. It is a scalar. Default to 0, which means no output.;Float representing the threshold for deciding whether boxes overlap too much with respect to IOU. It is scalar. Value range [0, 1]. Default to 0.;Float representing the threshold for deciding when to remove boxes based on score. It is a scalar.",selected_indices,tensor(int64),"selected indices from the boxes tensor. [num_selected_indices, 3], the selected index format is [batch_index, class_index, box_index].",center_point_box,int (default is 0),"Integer indicate the format of the box data. The default is 0. 0 - the box data is supplied as [y1, x1, y2, x2] where (y1, x1) and (y2, x2) are the coordinates of any diagonal pair of box corners and the coordinates can be provided as normalized (i.e., lying in the interval [0, 1]) or absolute. Mostly used for TF models. 1 - the box data is supplied as [x_center, y_center, width, height]. Mostly used for Pytorch models.",unknown
NonZero,"13, 9","Returns the indices of the elements that are non-zero       (in row-major order - by dimension).       NonZero behaves similar to numpy.nonzero:       https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html,       but for scalar input, NonZero produces output shape (0, N) instead of (1, N), which is different from Numpy's behavior.",X,T,input,Y,tensor(int64),output,,,,unknown
Not,1,Returns the negation of the input tensor element-wise.,X,T,Input tensor,Y,T,Output tensor,,,,vector
OneHot,"11, 9","Produces a one-hot tensor based on inputs.       The locations represented by the index values in the 'indices' input tensor will have 'on_value'       and the other locations will have 'off_value' in the output tensor, where 'on_value' and 'off_value'       are specified as part of required input argument 'values', which is a two-element tensor of format       [off_value, on_value]. The rank of the output tensor will be one greater than the rank of the       input tensor. The additional dimension is for one-hot representation. The additional dimension will       be inserted at the position specified by 'axis'. If 'axis' is not specified then then additional       dimension will be inserted as the innermost dimension, i.e. axis=-1. The size of the additional       dimension is specified by required scalar input 'depth'. The type of the output tensor is the same       as the type of the 'values' input. Any entries in the 'indices' input tensor with values outside       the range [-depth, depth-1] will result in one-hot representation with all 'off_value' values in the       output tensor.       when axis = 0:       output[input[i, j, k], i, j, k] = 1 for all i, j, k and 0 otherwise.       when axis = -1:       output[i, j, k, input[i, j, k]] = 1 for all i, j, k and 0 otherwise.","indices,depth,values","T1,T2,T3","Input tensor containing indices. Any entries in the 'indices' input tensor with values outside the range [-depth, depth-1] will result in one-hot representation with all 'off_value' values in the output tensor.In case 'indices' is of non-integer type, the values will be casted to int64 before use.;Scalar or Rank 1 tensor containing exactly one element, specifying the number of classes in one-hot tensor. This is also the size of the one-hot dimension (specified by 'axis' attribute) added on in the output tensor. The values in the 'indices' input tensor are expected to be in the range [-depth, depth-1]. In case 'depth' is of non-integer type, it will be casted to int64 before use.;Rank 1 tensor containing exactly two elements, in the format [off_value, on_value], where 'on_value' is the value used for filling locations specified in 'indices' input tensor, and 'off_value' is the value used for filling locations other than those specified in 'indices' input tensor.",output,T3,"Tensor of rank one greater than input tensor 'indices', i.e. rank(output) = rank(indices) + 1. The data type for the elements of the output tensor is the same as the type of input 'values' is used.",axis,int (default is -1),"(Optional) Axis along which one-hot representation in added. Default: axis=-1. axis=-1 means that the additional dimension will be inserted as the innermost/last dimension in the output tensor. Negative value means counting dimensions from the back. Accepted range is [-r-1, r] where r = rank(indices).",unknown
Optional,15,"Constructs an optional-type value containing either an empty optional of a certain type specified by the attribute,   or a non-empty value containing the input element.",input,V,The input element.,output,O,The optional output enclosing the input element.,type,type_proto,Type of the element in the optional output,unknown
OptionalGetElement,"18, 15","If the input is a tensor or sequence type, it returns the input.   If the input is an optional type, it outputs the element in the input.   It is an error if the input is an empty optional-type (i.e. does not have an element) and the behavior is undefined in this case.",input,O,The optional input.,output,V,Output element in the optional input.,,,,unknown
OptionalHasElement,"18, 15","Returns true if (1) the input is an optional-type and contains an element,   or, (2) the input is a tensor or sequence type.   If the input is not provided or is an empty optional-type, this op returns false.",input,O,The optional input.,output,B,"A scalar boolean tensor. If true, it indicates that optional-type input contains an element. Otherwise, it is empty.",,,,unknown
Or,"7, 1","Returns the tensor resulted from performing the `or` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,vector
PRelu,"16, 1, 6, 7, 9","PRelu takes input data (Tensor<T>) and slope tensor as input, and produces one   output data (Tensor<T>) where the function `f(x) = slope * x for x < 0`,   `f(x) = x for x >= 0`., is applied to the data tensor elementwise.   This operator supports **unidirectional broadcasting** (tensor slope should be unidirectional broadcastable to input tensor X); for more details please check [the doc](Broadcasting.md).","X,slope","T,T","Input tensor;Slope tensor. The shape of slope can be smaller than first input X; if so, its shape must be unidirectional broadcastable to X",Y,T,Output tensor (same size as X),,,,vector
Pad,"23, 1, 2, 11, 13, 18, 19, 21","Given a tensor containing the data to be padded (`data`), a tensor containing the number of start and end pad values for axis (`pads`), (optionally) a `mode`, and (optionally) `constant_value`,   a padded tensor (`output`) is generated.   The three supported `modes` are (similar to corresponding modes supported by `numpy.pad`):   1) `constant`(default) - pads with a given constant value as specified by `constant_value` (which defaults to 0, empty string, or False)   2) `reflect` - pads with the reflection of the vector mirrored on the first and last values of the vector along each axis   3) `edge` - pads with the edge values of array   4) `wrap` - wrap-around padding as if the data tensor forms a torus   Example 1 (`constant` mode):   Insert 0 pads to the beginning of the second dimension.   ```   data = [       [1.0, 1.2],       [2.3, 3.4],       [4.5, 5.7],   ]   pads = [0, 2, 0, 0]   mode = 'constant'   constant_value = 0.0   output = [       [0.0, 0.0, 1.0, 1.2],       [0.0, 0.0, 2.3, 3.4],       [0.0, 0.0, 4.5, 5.7],   ]   ```   Example 2 (`reflect` mode):   ```   data = [       [1.0, 1.2],       [2.3, 3.4],       [4.5, 5.7],   ]   pads = [0, 2, 0, 0]   mode = 'reflect'   output = [       [1.0, 1.2, 1.0, 1.2],       [2.3, 3.4, 2.3, 3.4],       [4.5, 5.7, 4.5, 5.7],   ]   ```   Example 3 (`edge` mode):   ```   data = [       [1.0, 1.2],       [2.3, 3.4],       [4.5, 5.7],   ]   pads = [0, 2, 0, 0]   mode = 'edge'   output = [       [1.0, 1.0, 1.0, 1.2],       [2.3, 2.3, 2.3, 3.4],       [4.5, 4.5, 4.5, 5.7],   ]   ```   Example 4 (`wrap` mode):   ```   data = [       [1.0, 1.2],       [2.3, 3.4],       [4.5, 5.7],   ]   pads = [2, 1, 1, 1]   mode = 'wrap'   output = [       [3.4, 2.3, 3.4, 2.3],       [5.7, 4.5, 5.7, 4.5],       [1.2, 1.0, 1.2, 1.0],       [3.4, 2.3, 3.4, 2.3],       [5.7, 4.5, 5.7, 4.5],       [1.2, 1.0, 1.2, 1.0],   ]   ```","data,pads,constant_value,axes","T,tensor(int64),T,Tind","Input tensor.;Tensor of integers indicating the number of padding elements to add or remove (if negative) at the beginning and end of each axis. For 2D input tensor, it is the number of pixels. `pads` should be a 1D tensor of shape [2 * num_axes] where `num_axes` refers to the number of elements in the `axes` input or the input rank if `axes` are not provided explicitly. `pads` format should be: [x1_begin, x2_begin, ..., x1_end, x2_end,...], where xi_begin is the number of pad values added at the beginning of axis `axes[i]` and xi_end, the number of pad values added at the end of axis `axes[i]`.;(Optional) A scalar value to be used if the mode chosen is `constant` (by default it is 0, empty string or False).;1-D tensor of axes that `pads` apply to. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data). Behavior is undefined if an axis is repeated. If not provided, all axes are assumed (`[0, 1, ..., input_rank-1]`).",output,T,Tensor after padding.,mode,string (default is constant),"Supported modes: `constant`(default), `reflect`, `edge`, `wrap`",mem
Pow,"15, 1, 7, 12, 13","Pow takes input data (Tensor<T>) and exponent Tensor, and   produces one output data (Tensor<T>) where the function `f(x) = x^exponent`,   is applied to the data tensor elementwise.   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","X,Y","T,T1","First operand, base of the exponent.;Second operand, power of the exponent.",Z,T,Output tensor,,,,vector
QLinearConv,10,"The convolution operator consumes a quantized input tensor, its scale and zero point,   a quantized filter, its scale and zero point, and output's scale and zero point,   and computes the quantized output. Each scale and zero-point pair must have same shape.   It means they must be either scalars (per tensor) or 1-D tensors (per output channel).   Each input or output and its related zero point must have same type.   When bias is present it must be quantized using scale = input scale * weight scale and   zero point as 0.","x,x_scale,x_zero_point,w,w_scale,w_zero_point,y_scale,y_zero_point,B","T1,tensor(float),T1,T2,tensor(float),T2,tensor(float),T3,T4","Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 ... x Dn). Optionally, if dimension denotation is in effect, the operation expects input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].;Scale tensor for input 'x'. It's a scalar, which means a per-tensor/layer quantization.;Zero point tensor for input 'x'. It's a scalar, which means a per-tensor/layer quantization.;The weight tensor that will be used in the convolutions; has size (M x C/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C/group x k1 x k2 x ... x kn), where (k1 x k2 x ... kn) is the dimension of the kernel. Optionally, if dimension denotation is in effect, the operation expects the weight tensor to arrive with the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL, FILTER_SPATIAL ...]. X.shape[1] == (W.shape[1] * group) == C (assuming zero based indices for the shape array). Or in other words FILTER_IN_CHANNEL should be equal to DATA_CHANNEL.;Scale tensor for input 'w'. It could be a scalar or a 1-D tensor, which means a per-tensor/layer or per output channel quantization. If it's a 1-D tensor, its number of elements should be equal to the number of output channels (M).;Zero point tensor for input 'w'. It could be a scalar or a 1-D tensor, which means a per-tensor/layer or per output channel quantization. If it's a 1-D tensor, its number of elements should be equal to the number of output channels (M).;Scale tensor for output 'y'. It's a scalar, which means a per-tensor/layer quantization.;Zero point tensor for output 'y'. It's a scalar, which means a per-tensor/layer quantization.;Optional 1D bias to be added to the convolution, has size of M. Bias must be quantized using scale = x_scale * w_scale and zero_point = 0",y,T3,"Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.","auto_pad,dilations,group,kernel_shape,pads,strides","string (default is NOTSET),list of ints,int (default is 1),list of ints,list of ints,list of ints","auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that `output_shape[i] = ceil(input_shape[i] / strides[i])` for each axis `i`. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.;dilation value along each spatial axis of the filter. If not present, the dilation defaults to 1 along each spatial axis.;number of groups input channels and output channels are divided into. default is 1.;The shape of the convolution kernel. If not present, should be inferred from input 'w'.;Padding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0.The value represent the number of pixels added to the beginning and end part of the corresponding axis.`pads` format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number ofpixels added at the beginning of axis `i` and xi_end, the number of pixels added at the end of axis `i`.This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaultsto 0 along start and end of each spatial axis.;Stride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",unknown
QLinearMatMul,"21, 10","Matrix product that behaves like [numpy.matmul](https://numpy.org/doc/stable/reference/generated/numpy.matmul.html).   It consumes two quantized input tensors, their scales and zero points, scale and zero point of output,   and computes the quantized output. The quantization formula is y = saturate((x / y_scale) + y_zero_point).   For (x / y_scale), it is rounding to nearest ties to even. Refer to https://en.wikipedia.org/wiki/Rounding for details.   Scale and zero point must have same shape. They must be either scalar (per tensor) or N-D tensor   (per row for 'a' and per column for 'b'). Scalar refers to per tensor quantization whereas N-D refers to per row   or per column quantization. If the input is 2D of shape [M, K] then zero point and scale tensor may be   an M element vector [v_1, v_2, ..., v_M] for per row quantization and K element vector of shape [v_1, v_2, ..., v_K]   for per column quantization. If the input is N-D tensor with shape [D1, D2, M, K] then zero point and scale tensor may   have shape [D1, D2, M, 1] for per row quantization and shape [D1, D2, 1, K] for per column quantization.   Production must never overflow, and accumulation may overflow if and only if in 32 bits.","a,a_scale,a_zero_point,b,b_scale,b_zero_point,y_scale,y_zero_point","T1,TS,T1,T2,TS,T2,TS,T3",N-dimensional quantized matrix a;scale of quantized input a;zero point of quantized input a;N-dimensional quantized matrix b;scale of quantized input b;zero point of quantized input b;scale of quantized output y;zero point of quantized output y,y,T3,Quantized matrix multiply results from a * b,,,,unknown
QuantizeLinear,"23, 10, 13, 19, 21","The linear quantization operator consumes a high-precision tensor, a scale, and a zero point to compute the   low-precision/quantized tensor. The scale factor and zero point must have the same shape, determining the quantization   granularity. The quantization formula is `y = saturate((x / y_scale) + y_zero_point)`.   Saturation is done according to:   - uint16: [0, 65535]   - int16: [-32768, 32767]   - uint8: [0, 255]   - int8: [-128, 127]   - uint4: [0, 15]   - int4: [-8, 7]   For `(x / y_scale)`, it rounds to the nearest even. Refer to https://en.wikipedia.org/wiki/Rounding for details.   `y_zero_point` and `y` must have the same type. `y_zero_point` is usually not used for quantization to float8 and 4bit types, but the quantization   formula remains the same for consistency, and the type of the attribute `y_zero_point` still determines the quantization type.   `x` and `y_scale` are allowed to have different types. The type of `y_scale` determines the precision of the division operation between `x` and   `y_scale`, unless the `precision` attribute is specified.   There are three supported quantization granularities, determined by the shape of `y_scale`.   In all cases, `y_zero_point` must have the same shape as `y_scale`.   - Per-tensor (per-layer) quantization: `y_scale` is a scalar.   - Per-axis quantization: The scale must be a 1-D tensor, with the length of the quantization axis. For an input shape    `(D0, ..., Di, ..., Dn)` and `axis=i`, `y_scale` is a 1-D tensor of length `Di`.   - Blocked quantization: The scale's shape is identical to the input's shape, except for one dimension, in which     blocking is performed. Given `x` shape `(D0, ..., Di, ..., Dn)`, `axis=i`, and block size `B`: `y_scale` shape is     `(D0, ..., ceil(Di/B), ..., Dn)`.","x,y_scale,y_zero_point","T1,T2,T3","N-D full precision Input tensor to be quantized.;Scale for doing quantization to get `y`. For per-tensor/layer quantization the scale is a scalar, for per-axis quantization it is a 1-D Tensor and for blocked quantization it has the same shape as the input, except for one dimension in which blocking is performed.;Zero point for doing quantization to get `y`. Shape must match `y_scale`.Default is uint8 with zero point of 0 if it's not specified.",y,T3,N-D quantized output tensor. It has same shape as input `x`.,"axis,block_size,output_dtype,precision,saturate","int (default is 1),int (default is 0),int (default is 0),int (default is 0),int (default is 1)","(Optional) The axis of the dequantizing dimension of the input tensor. Used only for per-axis and blocked quantization. Negative value means counting dimensions from the back. Accepted range is `[-r, r-1]` where `r = rank(input)`. When the rank of the input is 1, per-tensor quantization is applied, rendering the axis unnecessary in this scenario.;(Optional) The size of the quantization block (number of times every scale is replicated). Used only for blocked quantization. The block size is a positive integer. Given `x` shape `(D0, ..., Di, ..., Dn)`, `y_scale` shape `(S0, ... Si, ...Sn)` and `axis=i`, the accepted range is `[ceil(Di/Si), ceil(Di/(Si-1))-1]`;(Optional) The output data type. If not supplied, the output data type is inferred from `y_zero_point` data type (`T3`). If neither `output_dtype` nor `y_zero_point` are supplied, output data type is uint8. If both `output_dtype` and `y_zero_point` are specified, `output_dtype` must be `T3`.;(Optional) The precision of the division operation between `x` and `y_scale`. If not provided, it will be the same as the type of `y_scale`.;The parameter defines how the conversion behaves if an input value is out of range of the destination type. It only applies for float 8 quantization (float8e4m3fn, float8e4m3fnuz, float8e5m2, float8e5m2fnuz). It is true by default. All cases are fully described in two tables inserted in the operator description.",unknown
RMSNormalization,23,"This is RMS normalization defined in ONNX as function as described in the paper https://arxiv.org/pdf/1910.07467.         The overall computation can be split into two stages. The root mean squared norm is taken over the last D dimensions,         where D is the dimension of normalized_shape. For example, if normalized_shape is (3, 5) (a 2-dimensional shape),         the rms norm is computed over the last 2 dimensions of the input. The computation required by standardization can be         described by the following equations.         ```         XSquared = Mul(X, X)         XSquaredMean = ReduceMean<axes=normalized_axes>(XSquared)         MeanSquareEpsilon = Add(XSquaredMean, epsilon)         RMS = Sqrt(MeanSquareEpsilon)         Normalized = Div(X, RMS)         ```         where `normalized_axes` is `[axis, ..., rank of X - 1]`. The variables `RMS` stand for root mean square,         Depending on `stash_type` attribute, the actual computation         must happen in different floating-point precision.         For example, if `stash_type` is 1, this operator casts         all input variables to 32-bit float, perform the computation, and         finally cast `Normalized` back to the original type of `X`.         The second stage then scales the outcome of the first stage using:         ```         Y= Mul(Normalized, Scale)         ```         Let `d[i]` indicate the i-th dimension of `X`.         If `X`'s shape is `[d[0], ..., d[axis-1], d[axis], ..., d[rank-1]]`,         the shape of `RMS` is `[d[0], ..., d[axis-1], 1, ..., 1]`.         `Y` and `X` have the same shape. This operator supports unidirectional broadcasting         (`Scale` should be unidirectional broadcastable to tensor `X`);         for more details please check [the doc](Broadcasting.md).","X,scale","T,V","The input tensor to be normalized. In general, the shape is (D1, D2, ... , Dn) for n-dimensional data, where the root mean squared norm is taken over the last D dimensions, D is determined by the axis attribute.;Scale tensor. Scale tensor shape should be broadcastable to the normalized shape.",Y,V,Output data tensor. Same shape as X,"axis,epsilon,stash_type","int (default is -1),float (default is 1e-05),int (default is 1)","The first normalization dimension. If rank(X) is r, axis' allowed range is [-r, r). Negative value means counting dimensions from the back.;The epsilon value to use to avoid division by zero.;The floating-point precision used in stage one of the computation.",unknown
RNN,"22, 1, 7, 14","Computes an one-layer simple RNN. This operator is usually supported   via some custom implementation such as CuDNN.   Notations:   * `X` - input tensor   * `i` - input gate   * `t` - time step (t-1 means previous time step)   * `Wi` - W parameter weight matrix for input gate   * `Ri` - R recurrence weight matrix for input gate   * `Wbi` - W parameter bias vector for input gate   * `Rbi` - R parameter bias vector for input gate   * `WBi` - W parameter weight matrix for backward input gate   * `RBi` - R recurrence weight matrix for backward input gate   * `WBbi` - WR bias vectors for backward input gate   * `RBbi` - RR bias vectors for backward input gate   * `H` - Hidden state   * `num_directions` - 2 if direction == bidirectional else 1   Activation functions:   * Relu(x)                - max(0, x)   * Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})   * Sigmoid(x)             - 1/(1 + e^{-x})   NOTE: Below are optional   * Affine(x)              - alpha*x + beta   * LeakyRelu(x)           - x if x >= 0 else alpha * x   * ThresholdedRelu(x)     - x if x >= alpha else 0   * ScaledTanh(x)          - alpha*Tanh(beta*x)   * HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)   * Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)   * Softsign(x)            - x/(1 + |x|)   * Softplus(x)            - log(1 + e^x)   Equations (Default: f=Tanh):   * Ht = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Wbi + Rbi)   This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.","X,W,R,B,sequence_lens,initial_h","T,T,T,T,T1,T","The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.;The weight tensor for input gate. Concatenation of `Wi` and `WBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, input_size]`.;The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, hidden_size]`.;The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and `[WBbi, RBbi]` (if bidirectional). The tensor has shape `[num_directions, 2*hidden_size]`. Optional: If not specified - assumed to be 0.;Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.;Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.","Y,Y_h","T,T","A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`.;The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.","activation_alpha,activation_beta,activations,clip,direction,hidden_size,layout","list of floats,list of floats,list of strings (default is ['Tanh', 'Tanh']),float,string (default is forward),int,int (default is 0)","Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.;Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.;One (or two if bidirectional) activation function for input gate. The activation function must be one of the activation functions specified above. Optional: Default `Tanh` if not specified.;Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.;Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.;Number of neurons in the hidden layer;The shape format of inputs X, initial_h and outputs Y, Y_h. If 0, the following shapes are expected: X.shape = [seq_length, batch_size, input_size], Y.shape = [seq_length, num_directions, batch_size, hidden_size], initial_h.shape = Y_h.shape = [num_directions, batch_size, hidden_size]. If 1, the following shapes are expected: X.shape = [batch_size, seq_length, input_size], Y.shape = [batch_size, seq_length, num_directions, hidden_size], initial_h.shape = Y_h.shape = [batch_size, num_directions, hidden_size].",cube
RandomNormal,"22, 1",Generate a tensor with random values drawn from a normal distribution. The shape   of the tensor is specified by the `shape` argument and the parameter of the normal distribution   specified by `mean` and `scale`.   The data type is specified by the 'dtype' argument. The 'dtype' argument must   be one of the data types specified in the 'DataType' enum field in the   TensorProto message.,output,T,Output tensor of random values drawn from normal distribution,output,T,Output tensor of random values drawn from normal distribution,"dtype,mean,scale,seed,shape","int (default is 1),float (default is 0.0),float (default is 1.0),float,list of ints (required)","The data type for the elements of the output tensor. Default is TensorProto::FLOAT.;The mean of the normal distribution.;The standard deviation of the normal distribution.;(Optional) Seed to the random generator, if not specified we will auto generate one.;The shape of the output tensor.",unknown
RandomNormalLike,"22, 1","Generate a tensor with random values drawn from a normal distribution.   The shape of the output tensor is copied from the shape of the input tensor,   and the parameters of the normal distribution are specified by `mean` and `scale`.   The data type is specified by the 'dtype' argument, or copied from the input tensor if not provided.   The 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the   TensorProto message, and be valid as an output type.",input,T1,Input tensor to copy shape and optionally type information from.,output,T2,Output tensor of random values drawn from normal distribution,"dtype,mean,scale,seed","int,float (default is 0.0),float (default is 1.0),float","(Optional) The data type for the elements of the output tensor, if not specified, we will use the data type of the input tensor.;The mean of the normal distribution.;The standard deviation of the normal distribution.;(Optional) Seed to the random generator, if not specified we will auto generate one.",unknown
RandomUniform,"22, 1",Generate a tensor with random values drawn from a uniform distribution. The shape   of the tensor is specified by the `shape` argument and the range by `low` and `high`.   The data type is specified by the 'dtype' argument. The 'dtype' argument must   be one of the data types specified in the 'DataType' enum field in the   TensorProto message.,output,T,Output tensor of random values drawn from uniform distribution,output,T,Output tensor of random values drawn from uniform distribution,"dtype,high,low,seed,shape","int (default is 1),float (default is 1.0),float (default is 0.0),float,list of ints (required)","The data type for the elements of the output tensor. If not specified, default is TensorProto::FLOAT.;Upper boundary of the output values.;Lower boundary of the output values.;(Optional) Seed to the random generator, if not specified we will auto generate one.;The shape of the output tensor.",unknown
RandomUniformLike,"22, 1","Generate a tensor with random values drawn from a uniform distribution.   The shape of the output tensor is copied from the shape of the input tensor,   and the parameters of the uniform distribution are specified by `low` and `high`.   The data type is specified by the 'dtype' argument, or copied from the input tensor if not provided.   The 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the   TensorProto message and be valid as an output type.",input,T1,Input tensor to copy shape and optionally type information from.,output,T2,Output tensor of random values drawn from uniform distribution,"dtype,high,low,seed","int,float (default is 1.0),float (default is 0.0),float","(Optional) The data type for the elements of the output tensor, if not specified, we will use the data type of the input tensor.;Upper boundary of the output values.;Lower boundary of the output values.;(Optional) Seed to the random generator, if not specified we will auto generate one.",unknown
Range,11,"Generate a tensor containing a sequence of numbers that begin at `start` and extends by increments of `delta`   up to `limit` (exclusive).   The number of elements in the output of range is computed as below:   ```   number_of_elements = max( ceil( (limit - start) / delta ) , 0 )   ```   The pseudocode determining the contents of the output is shown below:   ```   for(int i=0; i<number_of_elements; ++i) {     output[i] =  start + (i * delta);   }   ```   Example 1   ```   Inputs: start = 3, limit = 9, delta = 3   Output: [3, 6]   ```   Example 2   ```   Inputs: start = 10, limit = 4, delta = -2   Output: [10, 8, 6]   ```","start,limit,delta","T,T,T",Scalar. First entry for the range of output values.;Scalar. Exclusive upper limit for the range of output values.;Scalar. Value to step by.,output,T,A 1-D tensor with same type as the inputs containing generated range of values.,,,,unknown
Reciprocal,"13, 1, 6","Reciprocal takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the reciprocal is, y = 1/x, is applied to   the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,,,,vector
ReduceL1,"18, 1, 11, 13","Computes the L1 norm of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields 0.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceL2,"18, 1, 11, 13","Computes the L2 norm of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields 0.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceLogSum,"18, 1, 11, 13","Computes the log sum of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields minus infinity (if supported by the datatype) or undefined otherwise.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceLogSumExp,"18, 1, 11, 13","Computes the log sum exponent of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields minus infinity (if supported by the datatype) or undefined otherwise.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceMax,"20, 1, 11, 12, 13, 18","Computes the max of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields minus infinity (if supported by the datatype) or the minimum value of the data type otherwise.   If the input data type is Boolean, the comparison should consider `False < True`.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceMean,"18, 1, 11, 13","Computes the mean of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields undefined.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceMin,"20, 1, 11, 12, 13, 18","Computes the min of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields plus infinity (if supported by the datatype) or the maximum value of the data type otherwise.   If the input data type is Boolean, the comparison should consider `False < True`.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceProd,"18, 1, 11, 13","Computes the product of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields 1.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceSum,"13, 1, 11","Computes the sum of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields 0.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
ReduceSumSquare,"18, 1, 11, 13","Computes the sum square of the input tensor's elements along the provided axes. The resulting   tensor has the same rank as the input if `keepdims` equals 1. If `keepdims` equals 0, then   the resulting tensor has the reduced dimension pruned. Input tensors of rank zero are   valid. Reduction over an empty set of values yields 0.   The above behavior is similar to numpy, with the exception that numpy defaults `keepdims`   to `False` instead of `True`.","data,axes","T,tensor(int64)","An input tensor.;Optional input list of integers, along which to reduce. The default is to reduce over all the dimensions of the input tensor if 'noop_with_empty_axes' is false, else act as an Identity op when 'noop_with_empty_axes' is true. Accepted range is [-r, r-1] where r = rank(data).",reduced,T,Reduced output tensor.,"keepdims,noop_with_empty_axes","int (default is 1),int (default is 0)","Keep the reduced dimension or not, default 1 means keep reduced dimension.;Defines behavior if 'axes' is empty. Default behavior with 'false' is to reduce all axes. When axes is empty and this attribute is set to true, input tensor will not be reduced,and the output tensor would be equivalent to input tensor.",vector
RegexFullMatch,20,"RegexFullMatch performs a full regex match on each element of the input tensor. If an element fully matches the regex pattern specified as an attribute, the corresponding element in the output is True and it is False otherwise. [RE2](https://github.com/google/re2/wiki/Syntax) regex syntax is used.",X,T1,Tensor with strings to match on.,Y,T2,Tensor of bools indicating if each input string fully matches the regex pattern specified.,pattern,string,Regex pattern to match on. This must be valid RE2 syntax.,unknown
Relu,"14, 1, 6, 13","Relu takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the rectified linear function, y = max(0, x), is applied to   the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,,,,vector
Reshape,"23, 1, 5, 13, 14, 19, 21","Reshape the input tensor similar to numpy.reshape.   First input is the data tensor, second input is a shape tensor which specifies the output shape. It outputs the reshaped tensor.   At most one dimension of the new shape can be -1. In this case, the value is   inferred from the size of the tensor and the remaining dimensions. A dimension   could also be 0, in which case the actual dimension value is unchanged (i.e. taken   from the input tensor). If 'allowzero' is set, and the new shape includes 0, the   dimension will be set explicitly to zero (i.e. not taken from input tensor).   Shape (second input) could be an empty shape, which means converting to a scalar.   The input tensor's shape and the output tensor's shape are required to have the same number of elements.  ","data,shape","T,tensor(int64)",An input tensor.;Specified shape for output.,reshaped,T,Reshaped data.,,,,mem
Resize,"19, 10, 11, 13, 18","Resize the input tensor. In general, it calculates every value in the output tensor as a weighted average of neighborhood (a.k.a. sampling locations) in the input tensor.   Each dimension value of the output tensor is:   ```   output_dimension = floor(input_dimension * (roi_end - roi_start) * scale)   ```   if input \""sizes\"" is not specified.","X,roi,scales,sizes","T1,T2,tensor(float),tensor(int64)","N-D tensor;1-D tensor given as [start1, ..., startN, end1, ..., endN], where N is the rank of X or the length of axes, if provided. The RoIs' coordinates are normalized in the coordinate system of the input image. It only takes effect when coordinate_transformation_mode is ""tf_crop_and_resize"";The scale array along each dimension. It takes value greater than 0. If it's less than 1, it's sampling down, otherwise, it's upsampling. The number of elements of 'scales' should be the same as the rank of input 'X' or the length of 'axes', if provided. One of 'scales' and 'sizes' MUST be specified and it is an error if both are specified. If 'sizes' is needed, the user can use an empty string as the name of 'scales' in this operator's input list.;Target size of the output tensor. Its interpretation depends on the 'keep_aspect_ratio_policy' value.The number of elements of 'sizes' should be the same as the rank of input 'X', or the length of 'axes', if provided. Only one of 'scales' and 'sizes' can be specified.",Y,T1,N-D tensor after resizing,"antialias,axes,coordinate_transformation_mode,cubic_coeff_a,exclude_outside,extrapolation_value,keep_aspect_ratio_policy,mode,nearest_mode","int (default is 0),list of ints,string (default is half_pixel),float (default is -0.75),int (default is 0),float (default is 0.0),string (default is stretch),string (default is nearest),string (default is round_prefer_floor)","If set to 1, ""linear"" and ""cubic"" interpolation modes will use an antialiasing filter when downscaling. Antialiasing is achieved by stretching the resampling filter by a factor max(1, 1 / scale), which means that when downsampling, more input pixels contribute to an output pixel.;If provided, it specifies a subset of axes that 'roi', 'scales' and 'sizes' refer to. If not provided, all axes are assumed [0, 1, ..., r-1], where r = rank(data). Non-specified dimensions are interpreted as non-resizable. Negative value means counting dimensions from the back. Accepted range is [-r, r-1], where r = rank(data). Behavior is undefined if an axis is repeated.;This attribute describes how to transform the coordinate in the resized tensor to the coordinate in the original tensor.  The coordinate of each dimension is transformed individually. Let's describe a case using axis x as an example. Denote `x_resized` as the coordinate of axis x in the resized tensor,  `x_original` as the coordinate of axis x in the original tensor,  `length_original` as the length of the original tensor in axis x,  `length_resized` as the length of the resized tensor in axis x,  `scale = length_resized / length_original`,  `output_width` the target length on the axis x which can be a fractional number when it is calculated out of a scale factor,  and `output_width_int` the effective output width as an integer.  if coordinate_transformation_mode is `""half_pixel""`, ``` x_original = (x_resized + 0.5) / scale - 0.5 ```  if coordinate_transformation_mode is `""half_pixel_symmetric""`, ``` adjustment = output_width_int / output_width center = input_width / 2 offset = center * (1 - adjustment) x_ori = offset + (x + 0.5) / scale - 0.5 ```  if coordinate_transformation_mode is `""pytorch_half_pixel""`, ``` x_original = length_resized > 1 ? (x_resized + 0.5) / scale - 0.5 : 0 ```  if coordinate_transformation_mode is `""align_corners""`, ``` x_original = x_resized * (length_original - 1) / (length_resized - 1) ```  if coordinate_transformation_mode is `""asymmetric""`, ``` x_original = x_resized / scale ```  if coordinate_transformation_mode is `""tf_crop_and_resize""`, ``` x_original = length_resized > 1 ? start_x * (length_original - 1) + x_resized * (end_x - start_x) * (length_original - 1) / (length_resized - 1) : 0.5 * (start_x + end_x) * (length_original - 1) ``` .;The coefficient 'a' used in cubic interpolation. Two common choice are -0.5 (in some cases of TensorFlow) and -0.75 (in PyTorch). Check out Equation (4) in https://ieeexplore.ieee.org/document/1163711 for the details. This attribute is valid only if mode is ""cubic"".;If set to 1, the weight of sampling locations outside the tensor will be set to 0 and the weight will be renormalized so that their sum is 1.0. The default value is 0.;When coordinate_transformation_mode is ""tf_crop_and_resize"" and x_original is outside the range [0, length_original - 1], this value is used as the corresponding output value. Default is 0.0f.;This attribute describes how to interpret the `sizes` input with regard to keeping the original aspect ratio of the input, and it is not applicable when the `scales` input is used.  Given a set of `sizes`, associated with a subset of `axes` (explicitly provided or default), and assuming `d = axes[i]`, with `i` being the index of the provided `sizes`.  If `keep_aspect_ratio_policy` is `""stretch""`, the original aspect ratio is disregarded, and the input is resized to the specified size: `out_size[d] = sizes[i]`  If `keep_aspect_ratio_policy` is `""not_larger""`, the sizes are adjusted so that no extent of the output is larger than the specified size, while keeping the original aspect ratio: ``` scale = Min(sizes[i] / in_size[d]) out_size[d] = round_int(scale * in_size[i]) ```  If `keep_aspect_ratio_policy` is `""not_smaller""`, the sizes are adjusted so that no extent of the output is smaller than the specified size, while keeping the original aspect ratio: ``` scale = Max(sizes[i] / in_size[d]) out_size[d] = round_int(scale * in_size[i]) ```  For non-resizable axes (those not specified in `axes`), the output size will be equal to the input size.  Note: `round_int` stands for computing the nearest integer value, rounding halfway cases up.;Three interpolation modes: ""nearest"" (default), ""linear"" and ""cubic"". The ""linear"" mode includes linear interpolation for 1D tensor and N-linear interpolation for N-D tensor (for example, bilinear interpolation for 2D tensor). The ""cubic"" mode includes cubic interpolation for 1D tensor and N-cubic interpolation for N-D tensor (for example, bicubic interpolation for 2D tensor).;Four modes: ""round_prefer_floor"" (default, as known as round half down), ""round_prefer_ceil"" (as known as round half up), ""floor"", ""ceil"". Only used by nearest interpolation. It indicates how to get ""nearest"" pixel in input tensor from x_original, so this attribute is valid only if ""mode"" is ""nearest"".",unknown
ReverseSequence,10,"Reverse batch of sequences having different lengths specified by `sequence_lens`.   For each slice i iterating on batch axis, the operator reverses the first sequence_lens[i] elements on time axis,   and copies elements whose index's beyond sequence_lens[i] to the output. So the output slice i contains reversed   sequences on the first sequence_lens[i] elements, then have original values copied for the other elements.   Example 1:     input = [[0.0, 4.0, 8.0,  12.0],              [1.0, 5.0, 9.0,  13.0],              [2.0, 6.0, 10.0, 14.0],              [3.0, 7.0, 11.0, 15.0]]     sequence_lens = [4, 3, 2, 1]     time_axis = 0     batch_axis = 1     output = [[3.0, 6.0, 9.0,  12.0],               [2.0, 5.0, 8.0,  13.0],               [1.0, 4.0, 10.0, 14.0],               [0.0, 7.0, 11.0, 15.0]]   Example 2:     input = [[0.0,  1.0,  2.0,  3.0 ],              [4.0,  5.0,  6.0,  7.0 ],              [8.0,  9.0,  10.0, 11.0],              [12.0, 13.0, 14.0, 15.0]]     sequence_lens = [1, 2, 3, 4]     time_axis = 1     batch_axis = 0     output = [[0.0,  1.0,  2.0,  3.0 ],               [5.0,  4.0,  6.0,  7.0 ],               [10.0, 9.0,  8.0,  11.0],               [15.0, 14.0, 13.0, 12.0]]","input,sequence_lens","T,tensor(int64)",Tensor of rank r >= 2.;Tensor specifying lengths of the sequences in a batch. It has shape `[batch_size]`.,Y,T,Tensor with same shape of input.,"batch_axis,time_axis","int (default is 1),int (default is 0)","(Optional) Specify which axis is batch axis. Must be one of 1 (default), or 0.;(Optional) Specify which axis is time axis. Must be one of 0 (default), or 1.",unknown
RoiAlign,"22, 10, 16","Region of Interest (RoI) align operation described in the   [Mask R-CNN paper](https://arxiv.org/abs/1703.06870).   RoiAlign consumes an input tensor X and region of interests (rois)   to apply pooling across each RoI; it produces a 4-D tensor of shape   (num_rois, C, output_height, output_width).   RoiAlign is proposed to avoid the misalignment by removing   quantizations while converting from original image into feature   map and from feature map into RoI feature; in each ROI bin,   the value of the sampled locations are computed directly   through bilinear interpolation.","X,rois,batch_indices","T1,T1,T2","Input data tensor from the previous operator; 4-D feature map of shape (N, C, H, W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data.;RoIs (Regions of Interest) to pool over; rois is 2-D input of shape (num_rois, 4) given as [[x1, y1, x2, y2], ...]. The RoIs' coordinates are in the coordinate system of the input image. Each coordinate set has a 1:1 correspondence with the 'batch_indices' input.;1-D tensor of shape (num_rois,) with each element denoting the index of the corresponding image in the batch.",Y,T1,"RoI pooled output, 4-D tensor of shape (num_rois, C, output_height, output_width). The r-th batch element Y[r-1] is a pooled feature map corresponding to the r-th RoI X[r-1].","coordinate_transformation_mode,mode,output_height,output_width,sampling_ratio,spatial_scale","string (default is half_pixel),string (default is avg),int (default is 1),int (default is 1),int (default is 0),float (default is 1.0)","Allowed values are 'half_pixel' and 'output_half_pixel'. Use the value 'half_pixel' to pixel shift the input coordinates by -0.5 (the recommended behavior). Use the value 'output_half_pixel' to omit the pixel shift for the input (use this for a backward-compatible behavior).;The pooling method. Two modes are supported: 'avg' and 'max'. Default is 'avg'.;default 1; Pooled output Y's height.;default 1; Pooled output Y's width.;Number of sampling points in the interpolation grid used to compute the output value of each pooled output bin. If > 0, then exactly sampling_ratio x sampling_ratio grid points are used. If == 0, then an adaptive number of grid points are used (computed as ceil(roi_width / output_width), and likewise for height). Default is 0.;Multiplicative spatial scale factor to translate ROI coordinates from their input spatial scale to the scale used when pooling, i.e., spatial scale of the input feature map X relative to the input image. E.g.; default is 1.0f.",unknown
RotaryEmbedding,23,"RotaryEmbedding is the implementation of rotary positional embeddings (RoPE) based on the paper https://arxiv.org/pdf/2104.09864.   The key advantage of RoPE is that it allows the model to understand both the absolute position of a token and the relative distances   between tokens. This is achieved through a rotational mechanism where the extent of rotation is computed based on the token's absolute position (position_ids).   The rotational mechanism is defined by sine and cosine functions that are used to represent the rotation angles.   For each token in the sequence, its positional embedding is computed by rotating its embedding vector. This is done by splitting the   embedding vector either into two halves or interleaving every alternate token and applying the rotation matrix to each half of the embedding vector.   The rotation matrix is parameterized by the token's position in the sequence. The rotated halves of the embedding vector are concatenated   to form the final positional embedding for each token. The rotated positional embeddings are used in the self-attention mechanism.   The rotation ensures that the model captures both absolute and relative positional information.   Rotary embeddings are defined using the following algorithm:   ```python   def compute_rotary_embedding(       input,       position_ids,       sin_cache,       cos_cache,       interleaved=0,       rotary_embedding_dim=0,       num_heads=0,   ):       # First ensure input to be processed has shape [batch_size, seq_len, num_heads, head_size]       if len(input.shape) == 4:           input = np.transpose(input, (0, 2, 1, 3))       batch_size = input.shape[0]       sequence_length = input.shape[1]       if len(input.shape) == 3:           hidden_size = input.shape[2]           assert num_heads != 0           head_size = int(hidden_size / num_heads)           new_shape = [batch_size, sequence_length, num_heads, head_size]           input = np.reshape(input, new_shape)       assert len(input.shape) == 4       head_size = input.shape[3]       # Fully or partially perform rotation on input based on rotary_embedding_dim attribute       if rotary_embedding_dim == 0:           # If rotary_embedding_dim not provided, perform full rotation by using head_size           rotary_embedding_dim = head_size       x_rotate = input[:, :, :, :rotary_embedding_dim]       x_not_rotate = input[:, :, :, rotary_embedding_dim:]       rotary_embedding_dim_half = int(rotary_embedding_dim / 2)       # Retrieve sin and cos caches using position ids       if position_ids is not None:           cos = cos_cache[position_ids]  # Shape: [batch_size, sequence_length, head_size/2]           sin = sin_cache[position_ids]  # Shape: [batch_size, sequence_length, head_size/2]       else:           cos = cos_cache           sin = sin_cache       cos = cos[:, :, :rotary_embedding_dim_half]  # Shape: [batch_size, sequence_length, rotary_embedding_dim/2]       sin = sin[:, :, :rotary_embedding_dim_half]  # Shape: [batch_size, sequence_length, rotary_embedding_dim/2]       cos = np.expand_dims(cos, axis=2)  # Shape: [batch_size, sequence_length, 1, rotary_embedding_dim/2]       sin = np.expand_dims(sin, axis=2)  # Shape: [batch_size, sequence_length, 1, rotary_embedding_dim/2]       # Either divide the input in halves or interleave (based on interleaved attribute)       if interleaved:           x1 = x_rotate[:, :, :, 0::2]           x2 = x_rotate[:, :, :, 1::2]       else:           x1, x2 = np.split(x_rotate, 2, axis=-1)       # Calculate real and imaginary values       real = cos * x1 - sin * x2       imag = sin * x1 + cos * x2       # Inserted rotated embeddings back to the original input       if interleaved:           # x_rotate[:, :, :, 0::2] = real           # x_rotate[:, :, :, 1::2] = imag           real = np.expand_dims(real, axis=-1)           imag = np.expand_dims(imag, axis=-1)           x_rotate_concat = np.concatenate((real, imag), axis=-1)           x_rotate = np.reshape(x_rotate_concat, x_rotate.shape)       else:           x_rotate = np.concatenate((real, imag), axis=-1)       output = np.concatenate((x_rotate, x_not_rotate), axis=-1)       if len(original_input_shape) == 3:           output = np.reshape(output, input.shape)       else:           output = np.transpose(output, (0, 2, 1, 3))       return output   ```","X,cos_cache,sin_cache,position_ids","T,T,T,M","The input tensor representing the token embeddings. 4D tensor with shape `(batch_size, num_heads, sequence_length, head_size)` or 3D tensor with shape `(batch_size, sequence_length, hidden_size)`. For cases with a 4D input tensor, `head_size` has to be even. For cases with a 3D input tensor, `num_heads` attribute must be provided and `hidden_size` must be an even multiple of `num_heads` where `hidden_size = num_heads * head_size`;The cosine values for the rotation. 2D tensor with shape `(max_position_id_plus_1, head_size / 2)` for full rotation or `(max_position_id_plus_1, rotary_embedding_dim / 2)` for partial rotation when `position_ids` are provided. 3D tensor with shape `(batch_size, sequence_length, head_size / 2)` for full rotation or `(batch_size, sequence_length, rotary_embedding_dim / 2)` for partial rotation when `position_ids` are not provided. `max_position_id_plus_1` is a parameter to the model.;The sine values for the rotation. 2D tensor with shape `(max_position_id_plus_1, head_size / 2)` for full rotation or `(max_position_id_plus_1, rotary_embedding_dim / 2)` for partial rotation when `position_ids` are provided. 3D tensor with shape `(batch_size, sequence_length, head_size / 2)` for full rotation or `(batch_size, sequence_length, rotary_embedding_dim / 2)` for partial rotation when `position_ids` are not provided. `max_position_id_plus_1` is a parameter to the model.;The position indices for the tokens. 2D tensor with shape `(batch_size, sequence_length)`",Y,T,Tensor with same shape as input.,"interleaved,num_heads,rotary_embedding_dim","int (default is 0),int,int (default is 0)",Rotate using interleaved pattern. Default value is 0 (False).;Number of attention heads. Must be provided when input is a 3D tensor.;Rotary embedding dimension used to apply partial rotary embeddings.,unknown
Round,"22, 11","Round takes one input Tensor and rounds the values, element-wise, meaning   it finds the nearest integer for each value.   In case of halves, the rule is to round them to the nearest even integer.   If input x is integral, +0, -0, NaN,  or infinite, x itself is returned.   The output tensor has the same shape and type as the input.   Examples:   ```   round([0.9]) = [1.0]   round([2.5]) = [2.0]   round([2.3]) = [2.0]   round([1.5]) = [2.0]   round([-4.5]) = [-4.0]   ```",X,T,Input tensor,Y,T,Output tensor,,,,unknown
STFT,17,Computes the Short-time Fourier Transform of the signal.,"signal,frame_step,window,frame_length","T1,T2,T1,T2","Input tensor representing a real or complex valued signal. For real input, the following shape is expected: [batch_size][signal_length][1]. For complex input, the following shape is expected: [batch_size][signal_length][2], where [batch_size][signal_length][0] represents the real component and [batch_size][signal_length][1] represents the imaginary component of the signal.;The number of samples to step between successive DFTs.;A tensor representing the window that will be slid over the signal.The window must have rank 1 with shape: [window_shape]. It's an optional value.;A scalar representing the size of the DFT. It's an optional value.",output,T1,"The Short-time Fourier Transform of the signals.If onesided is 1, the output has the shape: [batch_size][frames][dft_unique_bins][2], where dft_unique_bins is frame_length // 2 + 1 (the unique components of the DFT) If onesided is 0, the output has the shape: [batch_size][frames][frame_length][2], where frame_length is the length of the DFT.",onesided,int (default is 1),"If onesided is 1, only values for w in [0, 1, 2, ..., floor(n_fft/2) + 1] are returned because the real-to-complex Fourier transform satisfies the conjugate symmetry, i.e., X[m, w] = X[m,w]=X[m,n_fft-w]*. Note if the input or window tensors are complex, then onesided output is not possible. Enabling onesided with real inputs performs a Real-valued fast Fourier transform (RFFT).When invoked with real or complex valued input, the default value is 1. Values can be 0 or 1.",unknown
Scan,"23, 8, 9, 11, 16, 19, 21","Scan can be used to iterate over one or more scan_input tensors,   constructing zero or more scan_output tensors. It combines ideas from general recurrences,   functional programming constructs such as scan, fold, map, and zip, and is intended to enable   generalizations of RNN-like constructs for sequence-to-sequence processing.   Other tensors (referred to as state_variables here) can be used to carry a state   when iterating from one element to another (similar to hidden-state in RNNs, also referred   to as loop-carried dependences in the context of loops).   Many common usages involve a single scan_input tensor (where functionality   similar to scan, fold and map can be obtained). When more than one scan_input is used,   a behavior similar to zip is obtained.   The attribute body must be a graph, specifying the computation to be performed in   every iteration. It takes as input the current values of the state_variables and   the current iterated element of the scan_inputs. It must return the (updated) values   of the state_variables and zero or more scan_output_element tensors. The values of the   scan_output_element tensors are concatenated over all the iterations to produce the   scan_output values of the scan construct (similar to the concatenated intermediate   hidden-state values of RNN-like constructs). All the output tensors (state_variables as   well as scan_output_element tensors) are required to have the same shape in each iteration   of the loop (a restriction imposed to enable efficient memory allocation).   Note that the iterated element passed to the body subgraph does not have a sequence   axis. It will have a rank one less than the rank of the corresponding scan_input.   The scan operation returns the final values of the state_variables as well as the   scan_outputs.   The optional attribute scan_input_directions specifies the direction (forward or backward)   for each scan input. If this attribute is omitted, all sequences are scanned in the forward   direction. A bidirectional scan may be performed by specifying the same tensor input twice   in the scan_inputs, once with a forward direction, and once with a backward direction.   The scan_output of the operation is produced by concatenating the scan_output_element   values produced by the body in each iteration.  The optional attribute scan_output_directions   specifies the direction in which scan_output is constructed (by appending or prepending the   scan_output_element to scan_output in each iteration) for each scan_output. If this attribute   is omitted, the scan_output_element is appended to the scan_output in each iteration.   The optional attribute scan_input_axes specifies the axis to be scanned for each scan_input.   If omitted, every scan_input will be scanned in axis 0. For example, if axis 0 is the   batch axis and axis 1 is the time axis (to be scanned), specify an axis value of 1.   Note that scanning a non-zero axis may be less efficient than scanning axis zero.   The optional attribute scan_output_axes specifies the axis along which the scan_outputs   are accumulated for each scan_output. For example, if axis 1 is the time axis (to be   scanned) for both inputs and outputs, specify a scan_input axis and scan_output axis   value of 1.   Note that because of the ONNX restriction that only the last parameter of an operator can   be variadic, the initial-states and scan-inputs are listed together as one input parameter.   Similarly, the final-states and scan-outputs are listed together as one output parameter.   The attribute num_scan_inputs indicates the number M of scan-inputs.   The behavior of       Scan <           num_scan_inputs = m,           body = loop-body,           scan_input_axes = [axis_1, ..., axis_m]       > (init_1, ..., init_n, scan_1, ..., scan_m)   is equivalent to the following pseudo-code:       // scan_i.shape[axis_i] denotes the (max) sequence-length of scan_i       // scan_i.shape[axis_i] is required to be equal to scan_j.shape[axis_j] for all i,j.       sequence_length = scan_1.shape[axis_1];       // initialize state-variables       st_1 = init_1; ... st_n = init_n;       // initialize scan-output variables: [] denotes an empty tensor       scan_out_1 = []; ...; scan_out_k = [];       // identify number of iterations:       // execute loop       for (int t = 0; t < sequence_length; ++t) {           // generate the scan-input elements: the notation T<axis=k>[t] indicates the sub-tensor           // of rank one less than T obtained by indexing T at position t along axis k.           si_1 = scan_1<axis=axis_1>[t];           ... ;           si_m = scan_m<axis=axis_m>[t];           // execute loop-body           st_1, ..., st_n, so_1, ..., so_k = loop-body(st_1, ..., st_n, si_1, ..., si_m)           // accumulate the scan-output elements           scan_out_1 = Concat<axis=0>(scan_out_1, so_1); ... ; scan_out_k = Concat<axis=0>(scan_out_k, so_k);       }       return st_1, ..., st_n, scan_out_1, ..., scan_out_k;   *Sample usage: Encoding RNN using a Scan*   The following example shows how a simple RNN over an input tensor %X, with weight tensor %Wi,   recurrence weight tensor %Ri, bias tensors %Wbi and %Rbi, and initial hidden-state %H_0 can   be encoded as a ScanLoop. Note that the loop-body is a nested graph, and it directly computes   %Wi, %Ri, %Wbi, and %Rbi (typically constants or initializers in the body graph). If these   values are computed in the outer graph, they need to be passed in as extra state_variables.       graph rnn-encoding {         %H_0 = ...         %X = ...         %Y_h, %Y = Scan[body = <graph rnn-cell-1>, num_scan_inputs=1](%H_0, %X)         return %Y, %Y_h       }       graph rnn-cell-1 (         %H_tminus1[FLOAT, tensor]         %X_t[FLOAT, tensor]       ) {         %Wi = ...         %Ri = ...         %Wbi = ...         %Rbi = ...         %t1 = X_t * (Wi^T)         %t2 = H_tminus1*(Ri^T)         %t3 = Add(%t1, %t2)         %t4 = Add(%t3, %Wbi)         %t5 = Add(%t4, %Rbi)         %Ht = Tanh(%t5)         %Accumulate = Identity(%Ht)         return %Ht, %Accumulate       }",initial_state_and_scan_inputs,V,Initial values of the loop's N state variables followed by M scan_inputs,final_state_and_scan_outputs,V,Final values of the loop's N state variables followed by K scan_outputs,"body,num_scan_inputs,scan_input_axes,scan_input_directions,scan_output_axes,scan_output_directions","graph (required),int (required),list of ints,list of ints,list of ints,list of ints","The graph run each iteration. It has N+M inputs: (loop state variables..., scan_input_elts...). It has N+K outputs: (loop state variables..., scan_output_elts...). Each scan_output is created by concatenating the value of the specified scan_output_elt value at the end of each iteration of the loop. It is an error if the dimensions of these values change across loop iterations.;An attribute specifying the number of scan_inputs M.;An optional list of M flags. The i-th element of the list specifies the axis to be scanned (the sequence axis) for the i-th scan_input. If omitted, 0 will be used as the scan axis for every scan_input. Negative value for an axis means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).;An optional list of M flags. The i-th element of the list specifies the direction to be scanned for the i-th scan_input tensor: 0 indicates forward direction and 1 indicates reverse direction. If omitted, all scan_input tensors will be scanned in the forward direction.;An optional list of K flags. The i-th element of the list specifies the axis for the i-th scan_output. The scan outputs are accumulated along the specified axis. If omitted, 0 will be used as the scan axis for every scan_output. Negative value for an axis means counting dimensions from the back. Accepted range is [-r, r-1].;An optional list of K flags, one for each scan_output. The i-th element of the list specifies whether the i-th scan_output should be constructed by appending or prepending a new value in each iteration: 0 indicates appending and 1 indicates prepending. If omitted, all scan_output tensors will be produced by appending a value in each iteration.",unknown
Scatter,9,"This operator is deprecated. Please use ScatterElements, which provides the same functionality.   Scatter takes three inputs `data`, `updates`, and `indices` of the same   rank r >= 1 and an optional attribute axis that identifies an axis of `data`   (by default, the outer-most axis, that is axis 0). The output of the operation   is produced by creating a copy of the input `data`, and then updating its value   to values specified by `updates` at specific index positions specified by   `indices`. Its output shape is the same as the shape of `data`.   For each entry in `updates`, the target index in `data` is obtained by combining   the corresponding entry in `indices` with the index of the entry itself: the   index-value for dimension = axis is obtained from the value of the corresponding   entry in `indices` and the index-value for dimension != axis is obtained from the   index of the entry itself.   For instance, in a 2-D tensor case, the update corresponding to the [i][j] entry   is performed as below:   ```     output[indices[i][j]][j] = updates[i][j] if axis = 0,     output[i][indices[i][j]] = updates[i][j] if axis = 1,   ```   This operator is the inverse of GatherElements. It is similar to Torch's Scatter operation.   Example 1:   ```     data = [         [0.0, 0.0, 0.0],         [0.0, 0.0, 0.0],         [0.0, 0.0, 0.0],     ]     indices = [         [1, 0, 2],         [0, 2, 1],     ]     updates = [         [1.0, 1.1, 1.2],         [2.0, 2.1, 2.2],     ]     output = [         [2.0, 1.1, 0.0]         [1.0, 0.0, 2.2]         [0.0, 2.1, 1.2]     ]   ```   Example 2:   ```     data = [[1.0, 2.0, 3.0, 4.0, 5.0]]     indices = [[1, 3]]     updates = [[1.1, 2.1]]     axis = 1     output = [[1.0, 1.1, 3.0, 2.1, 5.0]]   ```",,,,,,,,,,unknown
ScatterElements,"18, 11, 13, 16","ScatterElements takes three inputs `data`, `updates`, and `indices` of the same   rank r >= 1 and an optional attribute axis that identifies an axis of `data`   (by default, the outer-most axis, that is axis 0). The output of the operation   is produced by creating a copy of the input `data`, and then updating its value   to values specified by `updates` at specific index positions specified by   `indices`. Its output shape is the same as the shape of `data`.   For each entry in `updates`, the target index in `data` is obtained by combining   the corresponding entry in `indices` with the index of the entry itself: the   index-value for dimension = axis is obtained from the value of the corresponding   entry in `indices` and the index-value for dimension != axis is obtained from the   index of the entry itself.   `reduction` allows specification of an optional reduction operation, which is applied to all values in `updates`   tensor into `output` at the specified `indices`.   In cases where `reduction` is set to ""none"", indices should not have duplicate entries: that is, if idx1 != idx2,   then indices[idx1] != indices[idx2]. For instance, in a 2-D tensor case, the update   corresponding to the [i][j] entry is performed as below:   ```   output[indices[i][j]][j] = updates[i][j] if axis = 0,   output[i][indices[i][j]] = updates[i][j] if axis = 1,   ```   When `reduction` is set to some reduction function `f`, the update corresponding to the [i][j] entry is performed as below:   ```   output[indices[i][j]][j] = f(output[indices[i][j]][j], updates[i][j]) if axis = 0,   output[i][indices[i][j]] = f(output[i][indices[i][j]], updates[i][j]) if axis = 1,   ```   where the `f` is `+`, `*`, `max` or `min` as specified.   This operator is the inverse of GatherElements. It is similar to Torch's Scatter operation.   (Opset 18 change): Adds max/min to the set of allowed reduction ops.   Example 1:   ```   data = [       [0.0, 0.0, 0.0],       [0.0, 0.0, 0.0],       [0.0, 0.0, 0.0],   ]   indices = [       [1, 0, 2],       [0, 2, 1],   ]   updates = [       [1.0, 1.1, 1.2],       [2.0, 2.1, 2.2],   ]   output = [       [2.0, 1.1, 0.0]       [1.0, 0.0, 2.2]       [0.0, 2.1, 1.2]   ]   ```   Example 2:   ```   data = [[1.0, 2.0, 3.0, 4.0, 5.0]]   indices = [[1, 3]]   updates = [[1.1, 2.1]]   axis = 1   output = [[1.0, 1.1, 3.0, 2.1, 5.0]]   ```","data,indices,updates","T,Tind,T","Tensor of rank r >= 1.;Tensor of int32/int64 indices, of r >= 1 (same rank as input). All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.;Tensor of rank r >=1 (same rank and shape as indices)",output,T,Tensor of rank r >= 1 (same rank as input).,"axis,reduction","int (default is 0),string (default is none)","Which axis to scatter on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).;Type of reduction to apply: none (default), add, mul, max, min. 'none': no reduction applied. 'add':  reduction using the addition operation. 'mul': reduction using the multiplication operation.'max': reduction using the maximum operation.'min': reduction using the minimum operation.",unknown
ScatterND,"18, 11, 13, 16","ScatterND takes three inputs `data` tensor of rank r >= 1, `indices` tensor of rank q >= 1,   and `updates` tensor of rank q + r - indices.shape[-1] - 1. The output of the operation   is produced by creating a copy of the input `data`, and then updating its value to values   specified by `updates` at specific index positions specified by `indices`. Its output shape   is the same as the shape of `data`.   `indices` is an integer tensor. Let k denote indices.shape[-1], the last dimension in the shape of `indices`.   `indices` is treated as a (q-1)-dimensional tensor of k-tuples, where each k-tuple is a partial-index into `data`.   Hence, k can be a value at most the rank of `data`. When k equals rank(data), each update entry specifies an   update to a single element of the tensor. When k is less than rank(data) each update entry specifies an   update to a slice of the tensor. Index values are allowed to be negative, as per the usual   convention for counting backwards from the end, but are expected in the valid range.   `updates` is treated as a (q-1)-dimensional tensor of replacement-slice-values. Thus, the   first (q-1) dimensions of updates.shape must match the first (q-1) dimensions of indices.shape.   The remaining dimensions of `updates` correspond to the dimensions of the   replacement-slice-values. Each replacement-slice-value is a (r-k) dimensional tensor,   corresponding to the trailing (r-k) dimensions of `data`.  Thus, the shape of `updates`   must equal indices.shape[0:q-1] ++ data.shape[k:r-1], where ++ denotes the concatenation   of shapes.   The `output` is calculated via the following equation:   ```   output = np.copy(data)   update_indices = indices.shape[:-1]   for idx in np.ndindex(update_indices):       output[indices[idx]] = updates[idx]   ```   The order of iteration in the above loop is not specified.   In particular, indices should not have duplicate entries: that is, if idx1 != idx2, then indices[idx1] != indices[idx2].   This ensures that the output value does not depend on the iteration order.   `reduction` allows specification of an optional reduction operation, which is applied to all values in `updates`   tensor into `output` at the specified `indices`.   In cases where `reduction` is set to ""none"", indices should not have duplicate entries: that is, if idx1 != idx2,   then indices[idx1] != indices[idx2]. This ensures that the output value does not depend on the iteration order.   When `reduction` is set to some reduction function `f`, `output` is calculated as follows:   ```   output = np.copy(data)   update_indices = indices.shape[:-1]   for idx in np.ndindex(update_indices):       output[indices[idx]] = f(output[indices[idx]], updates[idx])   ```   where the `f` is `+`, `*`, `max` or `min` as specified.   This operator is the inverse of GatherND.   (Opset 18 change): Adds max/min to the set of allowed reduction ops.   Example 1:   ```   data    = [1, 2, 3, 4, 5, 6, 7, 8]   indices = [[4], [3], [1], [7]]   updates = [9, 10, 11, 12]   output  = [1, 11, 3, 10, 9, 6, 7, 12]   ```   Example 2:   ```   data    = [[[1, 2, 3, 4], [5, 6, 7, 8], [8, 7, 6, 5], [4, 3, 2, 1]],               [[1, 2, 3, 4], [5, 6, 7, 8], [8, 7, 6, 5], [4, 3, 2, 1]],               [[8, 7, 6, 5], [4, 3, 2, 1], [1, 2, 3, 4], [5, 6, 7, 8]],               [[8, 7, 6, 5], [4, 3, 2, 1], [1, 2, 3, 4], [5, 6, 7, 8]]]   indices = [[0], [2]]   updates = [[[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],               [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]]   output  = [[[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],               [[1, 2, 3, 4], [5, 6, 7, 8], [8, 7, 6, 5], [4, 3, 2, 1]],               [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]],               [[8, 7, 6, 5], [4, 3, 2, 1], [1, 2, 3, 4], [5, 6, 7, 8]]]   ```","data,indices,updates","T,tensor(int64),T",Tensor of rank r >= 1.;Tensor of rank q >= 1.;Tensor of rank q + r - indices_shape[-1] - 1.,output,T,Tensor of rank r >= 1.,reduction,string (default is none),"Type of reduction to apply: none (default), add, mul, max, min. 'none': no reduction applied. 'add':  reduction using the addition operation. 'mul':  reduction using the addition operation. 'max': reduction using the maximum operation.'min': reduction using the minimum operation.",unknown
Selu,"22, 1, 6","Selu takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the scaled exponential linear unit function,   `y = gamma * (alpha * e^x - alpha) for x <= 0`, `y = gamma * x for x > 0`,   is applied to the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,"alpha,gamma","float (default is 1.67326),float (default is 1.0507)","Coefficient of SELU default to 1.67326319217681884765625 (i.e., float32 approximation of 1.6732632423543772848170429916717).;Coefficient of SELU default to 1.05070102214813232421875 (i.e., float32 approximation of 1.0507009873554804934193349852946).",vector
SequenceAt,11,"Outputs a tensor copy from the tensor at 'position' in 'input_sequence'.   Accepted range for 'position' is in `[-n, n - 1]`, where `n` is the number of tensors in 'input_sequence'.   Negative value means counting positions from the back.","input_sequence,position","S,I","Input sequence.;Position of the tensor in the sequence. Negative value means counting positions from the back. Accepted range in `[-n, n - 1]`, where `n` is the number of tensors in 'input_sequence'. It is an error if any of the index values are out of bounds. It must be a scalar(tensor of empty shape).",tensor,T,Output tensor at the specified position in the input sequence.,,,,unknown
SequenceConstruct,11,Construct a tensor sequence containing 'inputs' tensors.   All tensors in 'inputs' must have the same data type.,inputs,T,Tensors.,output_sequence,S,Sequence enclosing the input tensors.,,,,unknown
SequenceEmpty,11,"Construct an empty tensor sequence, with given data type.",output,S,Empty sequence.,output,S,Empty sequence.,dtype,int,(Optional) The data type of the tensors in the output sequence. The default type is 'float'.,unknown
SequenceErase,11,"Outputs a tensor sequence that removes the tensor at 'position' from 'input_sequence'.   Accepted range for 'position' is in `[-n, n - 1]`, where `n` is the number of tensors in 'input_sequence'.   Negative value means counting positions from the back.   'position' is optional, by default it erases the last tensor from 'input_sequence'.","input_sequence,position","S,I","Input sequence.;Position of the tensor in the sequence. Negative value means counting positions from the back. Accepted range in `[-n, n - 1]`, where `n` is the number of tensors in 'input_sequence'. It is an error if any of the index values are out of bounds. It must be a scalar(tensor of empty shape).",output_sequence,S,Output sequence that has the tensor at the specified position removed.,,,,unknown
SequenceInsert,11,"Outputs a tensor sequence that inserts 'tensor' into 'input_sequence' at 'position'.   'tensor' must have the same data type as 'input_sequence'.   Accepted range for 'position' is in `[-n, n]`, where `n` is the number of tensors in 'input_sequence'.   Negative value means counting positions from the back.   'position' is optional, by default it inserts 'tensor' to the back of 'input_sequence'.","input_sequence,tensor,position","S,T,I","Input sequence.;Input tensor to be inserted into the input sequence.;Position in the sequence where the new tensor is inserted. It is optional and default is to insert to the back of the sequence. Negative value means counting positions from the back. Accepted range in `[-n, n]`, where `n` is the number of tensors in 'input_sequence'. It is an error if any of the index values are out of bounds. It must be a scalar(tensor of empty shape).",output_sequence,S,Output sequence that contains the inserted tensor at given position.,,,,unknown
SequenceLength,11,Produces a scalar(tensor of empty shape) containing the number of tensors in 'input_sequence'.,input_sequence,S,Input sequence.,length,I,Length of input sequence. It must be a scalar(tensor of empty shape).,,,,unknown
SequenceMap,17,"Applies a sub-graph to each sample in the input sequence(s).   Inputs can be either tensors or sequences, with the exception of the first input which must   be a sequence. The length of the first input sequence will determine the number of samples in the   outputs. Any other sequence inputs should have the same number of samples. The number of inputs   and outputs, should match the one of the subgraph.   For each i-th element in the output, a sample will be extracted from the input sequence(s) at   the i-th position and the sub-graph will be applied to it.   The outputs will contain the outputs of the sub-graph for each sample, in the same order as in   the input.   This operator assumes that processing each sample is independent and could executed in parallel   or in any order. Users cannot expect any specific ordering in which each subgraph is computed.","input_sequence,additional_inputs","S,V",Input sequence.;Additional inputs to the graph,out_sequence,S,Output sequence(s),body,graph (required),The graph to be run for each sample in the sequence(s). It should have as many inputs and outputs as inputs and outputs to the SequenceMap function.,unknown
Shape,"23, 1, 13, 15, 19, 21","Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.   Optional attributes start and end can be used to compute a slice of the input tensor's shape.   If start axis is omitted, the slice starts from axis 0.   The end axis, if specified, is exclusive (and the returned value will not include the size of that axis).   If the end axis is omitted, the axes upto the last one will be included.   Negative axes indicate counting back from the last axis.   Note that axes will be clamped to the range [0, r-1], where r is the   rank of the input tensor if they are out-of-range (after adding r in the case of   negative axis). Thus, specifying any end value > r is equivalent to specifying an end   value of r, and specifying any start value < -r is equivalent to specifying a start   value of 0.   Examples:   ```   Input tensor with shape: [2, 3, 4]   No attributes specified.   Output: [2, 3, 4]   ```   ```   Input tensor with shape: [2, 3, 4]   start: -1   Output: [4]   ```   ```   Input tensor with shape: [2, 3, 4]   end: -1   Output: [2, 3]   ```   ```   Input tensor with shape: [2, 3, 4]   start: 1   end: 2   Output: [3]   ```",data,T,An input tensor.,shape,T1,Shape of the input tensor,"end,start","int,int (default is 0)","(Optional) Ending axis for slicing the shape. Negative value means counting dimensions from the back. If omitted, sizes of all axes upto (including) the last one will be included.;(Optional) Starting axis for slicing the shape. Default value is 0.Negative value means counting dimensions from the back.",unknown
Shrink,9,"Shrink takes one input data (Tensor<numeric>) and produces one Tensor output,   having same datatype and shape with input. It has two attributes, lambd and   bias. The formula of this operator is: If x < -lambd, y = x + bias;   If x > lambd, y = x - bias; Otherwise, y = 0.",input,T,The input data as Tensor.,output,T,The output.,"bias,lambd","float (default is 0.0),float (default is 0.5)",The bias value added to output. Default is 0.;The lambd value for the Shrink formulation. Default is 0.5.,unknown
Sigmoid,"13, 1, 6","Sigmoid takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the sigmoid function, y = 1 / (1 + exp(-x)), is applied to the   tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,,,,vector
Sign,"13, 9","Calculate the sign of the given input tensor element-wise.   If input > 0, output 1. if input < 0, output -1. if input == 0, output 0.",input,T,Input tensor,output,T,The sign of the input tensor computed element-wise. It has the same shape and type of the input.,,,,unknown
Sin,"22, 7","Calculates the sine of the given input tensor, element-wise.",input,T,Input tensor,output,T,The sine of the input tensor computed element-wise,,,,unknown
Sinh,"22, 9",Calculates the hyperbolic sine of the given input tensor element-wise.,input,T,Input tensor,output,T,The hyperbolic sine values of the input tensor computed element-wise,,,,unknown
Size,"23, 1, 13, 19, 21",Takes a tensor as input and outputs a int64 scalar that equals to the total number of elements of the input tensor.,data,T,An input tensor.,size,T1,Total number of elements of the input tensor,,,,unknown
Slice,"13, 1, 10, 11","Produces a slice of the input tensor along multiple axes. Similar to numpy:   https://numpy.org/doc/stable/user/basics.indexing.html?highlight=slice#slicing-and-striding   Slice uses the `starts`, `ends`, `axes` and `steps` inputs to select a sub-tensor   of its input `data` tensor.   An effective `starts[i]`, `ends[i]`, and `steps[i]` must be computed for each `i`   in `[0, ... r-1]` where `r = rank(input)` as follows:   If `axes` are omitted, they are set to `[0, ..., r-1]`.   If `steps` are omitted, they are set to `[1, ..., 1]` of length `len(starts)`   The effective values are initialized as `start[i] = 0`, `ends[i] = dims[i]` where   `dims` are the dimensions of `input` and `steps[i] = 1`.   All negative elements of `axes` are made non-negative by adding `r` to them, where   `r =rank(input)`.   All negative values in `starts[i]` and `ends[i]` have `dims[axes[i]]` added to them,   where `dims` are the dimensions of `input`. Then `start[axes[i]]` is the adjusted   `starts[i]` is clamped into the range `[0, dims[axes[i]]]` for positive stepping   and `[0, dims[axes[i]]-1]` for negative stepping.   The clamping for the adjusted `ends[i]` depends on the sign of `steps[i]` and must   accommodate copying 0 through `dims[axes[i]]` elements, so for positive stepping   `ends[axes[i]]` is clamped to `[0, dims[axes[i]]]`, while for negative stepping it   is clamped to `[-1, dims[axes[i]]-1]`.   Finally, `steps[axes[i]] = steps[i]`.   For slicing to the end of a dimension with unknown size, it is recommended to pass   in `INT_MAX` when slicing forward and 'INT_MIN' when slicing backward.   Example 1:   ```   data = [       [1, 2, 3, 4],       [5, 6, 7, 8],   ]   axes = [0, 1]   starts = [1, 0]   ends = [2, 3]   steps = [1, 2]   result = [       [5, 7],   ]   ```   Example 2:   ```   data = [       [1, 2, 3, 4],       [5, 6, 7, 8],   ]   starts = [0, 1]   ends = [-1, 1000]   result = [       [2, 3, 4],   ]   ```","data,starts,ends,axes,steps","T,Tind,Tind,Tind,Tind","Tensor of data to extract slices from.;1-D tensor of starting indices of corresponding axis in `axes`;1-D tensor of ending indices (exclusive) of corresponding axis in `axes`;1-D tensor of axes that `starts` and `ends` apply to. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data). Behavior is undefined if an axis is repeated.;1-D tensor of slice step of corresponding axis in `axes`. Negative value means slicing backward. 'steps' cannot be 0. Defaults to 1s.",output,T,Sliced data tensor.,,,,mem
Softmax,"13, 1, 11","The operator computes the normalized exponential values for the given input:    Softmax(input, axis) = Exp(input) / ReduceSum(Exp(input), axis=axis, keepdims=1)   The ""axis"" attribute indicates the dimension along which Softmax   will be performed. The output tensor has the same shape   and contains the Softmax values of the corresponding input.",input,T,The input tensor of rank >= axis.,output,T,The output values with the same shape as the input tensor.,axis,int (default is -1),"Describes the dimension Softmax will be performed on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).",unknown
SoftmaxCrossEntropyLoss,"13, 12","Loss function that measures the softmax cross entropy   between 'scores' and 'labels'.   This operator first computes a loss tensor whose shape is identical to the labels input.   If the input is 2-D with shape (N, C), the loss tensor may be a N-element vector L = (l_1, l_2, ..., l_N).   If the input is N-D tensor with shape (N, C, D1, D2, ..., Dk),   the loss tensor L may have (N, D1, D2, ..., Dk) as its shape and L[i,][j_1][j_2]...[j_k] denotes a scalar element in L.   After L is available, this operator can optionally do a reduction operator.   * shape(scores): (N, C) where C is the number of classes, or (N, C, D1, D2,..., Dk),     with K >= 1 in case of K-dimensional loss.   * shape(labels): (N) where each value is 0 <= labels[i] <= C-1, or (N, D1, D2,..., Dk),     with K >= 1 in case of K-dimensional loss.   The loss for one sample, l_i, can calculated as follows:   ```   l[i][d1][d2]...[dk] = -y[i][c][d1][d2]..[dk], where i is the index of classes.   ```   or   ```   l[i][d1][d2]...[dk] = -y[i][c][d1][d2]..[dk] * weights[c], if 'weights' is provided.   ```   loss is zero for the case when label-value equals ignore_index.   ```   l[i][d1][d2]...[dk]  = 0, when labels[n][d1][d2]...[dk] = ignore_index   ```   where:   ```   p = Softmax(scores)   y = Log(p)   c = labels[i][d1][d2]...[dk]   ```   Finally, L is optionally reduced:   * If reduction = 'none', the output is L with shape (N, D1, D2, ..., Dk).   * If reduction = 'sum', the output is scalar: Sum(L).   * If reduction = 'mean', the output is scalar: ReduceMean(L), or if weight is provided: `ReduceSum(L) / ReduceSum(W)`,     where tensor W is of shape `(N, D1, D2, ..., Dk)` and `W[n][d1][d2]...[dk] = weights[labels[i][d1][d2]...[dk]]`.","scores,labels,weights","T,Tind,T","The predicted outputs with shape [batch_size, class_size], or [batch_size, class_size, D1, D2 , ..., Dk], where K is the number of dimensions.;The ground truth output tensor, with shape [batch_size], or [batch_size, D1, D2, ..., Dk], where K is the number of dimensions. Labels element value shall be in range of [0, C). If ignore_index is specified, it may have a value outside [0, C) and the label values should either be in the range [0, C) or have the value ignore_index.;A manual rescaling weight given to each class. If given, it has to be a 1D Tensor assigning weight to each of the classes. Otherwise, it is treated as if having all ones.","output,log_prob","T,T","Weighted loss float Tensor. If reduction is 'none', this has the shape of [batch_size], or [batch_size, D1, D2, ..., Dk] in case of K-dimensional loss. Otherwise, it is a scalar.;Log probability tensor. If the output of softmax is prob, its value is log(prob).","ignore_index,reduction","int,string (default is mean)","Specifies a target value that is ignored and does not contribute to the input gradient. It's an optional value.;Type of reduction to apply to loss: none, sum, mean(default). 'none': no reduction will be applied, 'sum': the output will be summed. 'mean': the sum of the output will be divided by the number of elements in the output.",unknown
Softplus,"22, 1","Softplus takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the softplus function, y = ln(exp(x) + 1), is applied to   the tensor elementwise.",X,T,1D input tensor,Y,T,1D input tensor,,,,vector
Softsign,"22, 1",Calculates the softsign (x/(1+|x|)) of the given input tensor element-wise.,input,T,Input tensor,output,T,The softsign (x/(1+|x|)) values of the input tensor computed element-wise,,,,vector
SpaceToDepth,"13, 1","SpaceToDepth rearranges blocks of spatial data into depth. More specifically,   this op outputs a copy of the input tensor where values from the height and width dimensions   are moved to the depth dimension.",input,T,"Input tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",output,T,"Output tensor of [N, C * blocksize * blocksize, H/blocksize, W/blocksize].",blocksize,int (required),"Blocks of [blocksize, blocksize] are moved.",unknown
Split,"18, 1, 2, 11, 13","Split a tensor into a list of tensors, along the specified 'axis'.   Either input 'split' or the attribute 'num_outputs' should be specified, but not both.   If the attribute 'num_outputs' is specified, then the tensor is split into equal sized parts.   If the tensor is not evenly splittable into `num_outputs`, the last chunk will be smaller.   If the input 'split' is specified, it indicates the sizes of each output in the split.","input,split","T,tensor(int64)",The tensor to split;Optional length of each output. Values should be >= 0.Sum of the values must be equal to the dim value at 'axis' specified.,outputs,T,One or more outputs forming list of tensors after splitting,axis,int (default is 0),"Which axis to split on. A negative value means counting dimensions from the back. Accepted range is [-rank, rank-1] where r = rank(input).",mem
SplitToSequence,11,"Split a tensor into a sequence of tensors, along the specified 'axis'.   Lengths of the parts can be specified using the optional argument 'split'.   If the argument `split' is not specified, a default scalar value of 1   is used as the value of `split'.   'split' must contain only positive numbers.   'split' is either a scalar (tensor of empty shape), or a 1-D tensor.   If 'split' is a scalar, then 'input' will be split into chunks all of size 'split'   if possible. The last chunk alone may be smaller than 'split' if the 'input' size   along the given axis 'axis' is not divisible by 'split'.   If 'split' is a 1-dimensional tensor, the input tensor is split into 'size(split)' chunks,   with lengths of the parts on 'axis' specified in 'split'. In this scenario, the sum of entries   in 'split' must be equal to the dimension size of input tensor on 'axis'.","input,split","T,I","The tensor to split;Length of each output. It can be either a scalar(tensor of empty shape), or a 1-D tensor. All values must be >= 0.",output_sequence,S,One or more outputs forming a sequence of tensors after splitting,"axis,keepdims","int (default is 0),int (default is 1)","Which axis to split on. A negative value means counting dimensions from the back. Accepted range is [-rank, rank-1].;Keep the split dimension or not. Default 1, which means we keep split dimension. If input 'split' is specified, this attribute is ignored.",unknown
Sqrt,"13, 1, 6","Square root takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the square root is, y = x^0.5, is applied to   the tensor elementwise. If x is negative, then it will return NaN.",X,T,Input tensor,Y,T,Output tensor,,,,vector
Squeeze,"23, 1, 11, 13, 21","Remove single-dimensional entries from the shape of a tensor.   Takes an input `axes` with a list of axes to squeeze.   If `axes` is not provided, all the single dimensions will be removed from   the shape. If an axis is selected with shape entry not equal to one, an error is raised.","data,axes","T,tensor(int64)","Tensors with at least max(dims) dimensions.;List of integers indicating the dimensions to squeeze. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).",squeezed,T,Reshaped tensor with same data as input.,,,,mem
StringConcat,20,StringConcat concatenates string tensors elementwise (with NumPy-style broadcasting support),"X,Y","T,T",Tensor to prepend in concatenation;Tensor to append in concatenation,Z,T,Concatenated string tensor,,,,unknown
StringNormalizer,10,"StringNormalization performs string operations for basic cleaning.   This operator has only one input (denoted by X) and only one output   (denoted by Y). This operator first examines the elements in the X,   and removes elements specified in ""stopwords"" attribute.   After removing stop words, the intermediate result can be further lowercased,   uppercased, or just returned depending the ""case_change_action"" attribute.   This operator only accepts [C]- and [1, C]-tensor.   If all elements in X are dropped, the output will be the empty value of string tensor with shape [1]   if input shape is [C] and shape [1, 1] if input shape is [1, C].",X,tensor(string),UTF-8 strings to normalize,Y,tensor(string),UTF-8 Normalized strings,"case_change_action,is_case_sensitive,locale,stopwords","string (default is NONE),int (default is 0),string,list of strings","string enum that cases output to be lowercased/uppercases/unchanged. Valid values are ""LOWER"", ""UPPER"", ""NONE"". Default is ""NONE"";Boolean. Whether the identification of stop words in X is case-sensitive. Default is false;Environment dependent string that denotes the locale according to which output strings needs to be upper/lowercased.Default en_US or platform specific equivalent as decided by the implementation.;List of stop words. If not set, no word would be removed from X.",unknown
StringSplit,20,"StringSplit splits a string tensor's elements into substrings based on a delimiter attribute and a maxsplit attribute.   The first output of this operator is a tensor of strings representing the substrings from splitting each input string on the `delimiter` substring. This tensor has one additional rank compared to the input tensor in order to store the substrings for each input element (where the input tensor is not empty). Note that, in order to ensure the same number of elements are present in the final dimension, this tensor will pad empty strings as illustrated in the examples below. Consecutive delimiters are not grouped together and are deemed to delimit empty strings, except if the `delimiter` is unspecified or is the empty string (""""). In the case where the `delimiter` is unspecified or the empty string, consecutive whitespace characters are regarded as a single separator and leading or trailing whitespace is removed in the output.   The second output tensor represents the number of substrings generated. `maxsplit` can be used to limit the number of splits performed - after the `maxsplit`th split if the string is not fully split, the trailing suffix of input string after the final split point is also added. For elements where fewer splits are possible than specified in `maxsplit`, it has no effect.",X,T1,Tensor of strings to split.,"Y,Z","T2,T3","Tensor of substrings representing the outcome of splitting the strings in the input on the delimiter. Note that to ensure the same number of elements are present in the final rank, this tensor will pad any necessary empty strings.;The number of substrings generated for each input element.","delimiter,maxsplit","string,int","Delimiter to split on. If left unset or set to the empty string (""""), the input is split on consecutive whitespace.;Maximum number of splits (from left to right). If left unset (or if the number of possible splits are less than maxsplit), it will make as many splits as possible. Note that the maximum possible number of substrings returned with `maxsplit` specified is `maxsplit+1` since the remaining suffix after the `maxsplit`th split is included in the output.",unknown
Sub,"14, 1, 6, 7, 13","Performs element-wise binary subtraction (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).   (Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.","A,B","T,T",First operand.;Second operand.,C,T,"Result, has same element type as two inputs",,,,vector
Sum,"13, 1, 6, 8","Element-wise sum of each of the input tensors (with Numpy-style broadcasting support).   All inputs and outputs must have the same data type.   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).",data_0,T,List of tensors for sum.,sum,T,Output tensor.,,,,unknown
Tan,"22, 7","Calculates the tangent of the given input tensor, element-wise.",input,T,Input tensor,output,T,The tangent of the input tensor computed element-wise,,,,unknown
Tanh,"13, 1, 6",Calculates the hyperbolic tangent of the given input tensor element-wise.,input,T,Input tensor,output,T,The hyperbolic tangent values of the input tensor computed element-wise,,,,vector
TfIdfVectorizer,9,"This transform extracts n-grams from the input sequence and save them as a vector. Input can   be either a 1-D or 2-D tensor. For 1-D input, output is the n-gram representation of that input.   For 2-D input, the output is also a  2-D tensor whose i-th row is the n-gram representation of the i-th input row.   More specifically, if input shape is [C], the corresponding output shape would be [max(ngram_indexes) + 1].   If input shape is [N, C], this operator produces a [N, max(ngram_indexes) + 1]-tensor.   In contrast to standard n-gram extraction, here, the indexes of extracting an n-gram from the original   sequence are not necessarily consecutive numbers. The discontinuity between indexes are controlled by the number of skips.   If the number of skips is 2, we should skip two tokens when scanning through the original sequence.   Let's consider an example. Assume that input sequence is [94, 17, 36, 12, 28] and the number of skips is 2.   The associated 2-grams are [94, 12] and [17, 28] respectively indexed by [0, 3] and [1, 4].   If the number of skips becomes 0, the 2-grams generated are [94, 17], [17, 36], [36, 12], [12, 28]   indexed by [0, 1], [1, 2], [2, 3], [3, 4], respectively.   The output vector (denoted by Y) stores the count of each n-gram;   Y[ngram_indexes[i]] indicates the times that the i-th n-gram is found. The attribute ngram_indexes is used to determine the mapping   between index i and the corresponding n-gram's output coordinate. If pool_int64s is [94, 17, 17, 36], ngram_indexes is [1, 0],   ngram_counts=[0, 0], then the Y[0] (first element in Y) and Y[1] (second element in Y) are the counts of [17, 36] and [94, 17],   respectively. An n-gram which cannot be found in pool_strings/pool_int64s should be ignored and has no effect on the output.   Note that we may consider all skips up to S when generating the n-grams.   The examples used above are true if mode is ""TF"". If mode is ""IDF"", all the counts larger than 1 would be truncated to 1 and   the i-th element in weights would be used to scale (by multiplication) the count of the i-th n-gram in pool. If mode is ""TFIDF"",   this operator first computes the counts of all n-grams and then scale them by the associated values in the weights attribute.   Only one of pool_strings and pool_int64s can be set. If pool_int64s is set, the input should be an integer tensor.   If pool_strings is set, the input must be a string tensor.",X,T,Input for n-gram extraction,Y,T1,Ngram results,"max_gram_length,max_skip_count,min_gram_length,mode,ngram_counts,ngram_indexes,pool_int64s,pool_strings,weights","int (required),int (required),int (required),string (required),list of ints (required),list of ints (required),list of ints,list of strings,list of floats","Maximum n-gram length. If this value is 3, 3-grams will be used to generate the output.;Maximum number of items (integers/strings) to be skipped when constructing an n-gram from X. If max_skip_count=1, min_gram_length=2, max_gram_length=3, this operator may generate 2-grams with skip_count=0 and skip_count=1, and 3-grams with skip_count=0 and skip_count=1;Minimum n-gram length. If this value is 2 and max_gram_length is 3, output may contain counts of 2-grams and 3-grams.;The weighting criteria. It can be one of ""TF"" (term frequency), ""IDF"" (inverse document frequency), and ""TFIDF"" (the combination of TF and IDF);The starting indexes of 1-grams, 2-grams, and so on in pool. It is useful when determining the boundary between two consecutive collections of n-grams. For example, if ngram_counts is [0, 17, 36], the first index (zero-based) of 1-gram/2-gram/3-gram in pool are 0/17/36. This format is essentially identical to CSR (or CSC) sparse matrix format, and we choose to use this due to its popularity.;list of int64s (type: AttributeProto::INTS). This list is parallel to the specified 'pool_*' attribute. The i-th element in ngram_indexes indicate the coordinate of the i-th n-gram in the output tensor.;List of int64 n-grams learned from the training set. Either this or pool_strings attributes must be present but not both. It's an 1-D tensor starting with the collections of all 1-grams and ending with the collections of n-grams. The i-th element in pool stores the n-gram that should be mapped to coordinate ngram_indexes[i] in the output vector.;List of strings n-grams learned from the training set. Either this or pool_int64s attributes must be present but not both. It's an 1-D tensor starting with the collections of all 1-grams and ending with the collections of n-grams. The i-th element in pool stores the n-gram that should be mapped to coordinate ngram_indexes[i] in the output vector.;list of floats. This attribute stores the weight of each n-gram in pool. The i-th element in weights is the weight of the i-th n-gram in pool. Its length equals to the size of ngram_indexes. By default, weights is an all-one tensor.This attribute is used when mode is ""IDF"" or ""TFIDF"" to scale the associated word counts.",unknown
ThresholdedRelu,"22, 10","ThresholdedRelu takes one input data (Tensor<T>) and produces one output data   (Tensor<T>) where the rectified linear function, y = x for x > alpha, y = 0 otherwise,   is applied to the tensor elementwise.",X,T,Input tensor,Y,T,Output tensor,alpha,float (default is 1.0),Threshold value,unknown
Tile,"13, 1, 6","Constructs a tensor by tiling a given tensor.   This is the same as function `tile` in Numpy, but no broadcast.   For example A = [[1, 2], [3, 4]], B = [1, 2], tile(A, B) = [[1, 2, 1, 2], [3, 4, 3, 4]]","input,repeats","T,T1","Input tensor of any shape.;1D int64 tensor of the same length as input's dimension number, includes numbers of repeated copies along input's dimensions.",output,T,Output tensor of the same dimensions and type as tensor input. output_dim[i] = input_dim[i] * repeats[i],,,,mem
TopK,"11, 1, 10","Retrieve the top-K largest or smallest elements along a specified axis. Given an input tensor of   shape [a_0, a_1, ..., a_{n-1}] and integer argument k, return two outputs:   * Value tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}]     which contains the values of the top k elements along the specified axis   * Index tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}] which     contains the indices of the top k elements (original indices from the input     tensor).   * If ""largest"" is 1 (the default value) then the k largest elements are returned.   * If ""sorted"" is 1 (the default value) then the resulting k elements will be sorted.   * If ""sorted"" is 0, order of returned 'Values' and 'Indices' are undefined.   Given two equivalent values, this operator uses the indices along the axis as   a tiebreaker. That is, the element with the lower index will appear first.","X,K","T,tensor(int64)","Tensor of shape [a_0, a_1, ..., a_{n-1}];A 1-D tensor containing a single positive value corresponding to the number of top elements to retrieve","Values,Indices","T,I","Tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}] containing top K values from the input tensor;Tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}] containing the corresponding input tensor indices for the top K values.","axis,largest,sorted","int (default is -1),int (default is 1),int (default is 1)","Dimension on which to do the sort. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).;Whether to return the top-K largest or smallest elements.;Whether to return the elements in sorted order.",unknown
Transpose,"23, 1, 13, 21","Transpose the input tensor similar to numpy.transpose. For example, when   perm=(1, 0, 2), given an input tensor of shape (1, 2, 3), the output shape   will be (2, 1, 3).",data,T,An input tensor.,transposed,T,Transposed output.,perm,list of ints,"A list of integers. By default, reverse the dimensions, otherwise permute the axes according to the values given. Its length must be equal to the rank of the input.",mem
Trilu,14,"Given a 2-D matrix or batches of 2-D matrices, returns the upper or lower triangular part of the tensor(s).   The attribute ""upper"" determines whether the upper or lower part is retained. If set to true,   the upper triangular matrix is retained. Lower triangular matrix is retained otherwise.   Default value for the ""upper"" attribute is true.   Trilu takes one input tensor of shape [*, N, M], where * is zero or more batch dimensions. The upper triangular part consists   of the elements on and above the given diagonal (k). The lower triangular part consists of elements on and below the diagonal.   All other elements in the matrix are set to zero.   If k = 0, the triangular part on and above/below the main diagonal is retained.   If upper is set to true, a positive k retains the upper triangular matrix excluding the main diagonal and (k-1) diagonals above it.   A negative k value retains the main diagonal and |k| diagonals below it.   If upper is set to false, a positive k retains the lower triangular matrix including the main diagonal and k diagonals above it.   A negative k value excludes the main diagonal and (|k|-1) diagonals below it.","input,k","T,tensor(int64)",Input tensor of rank 2 or higher.;A 0-D tensor containing a single value corresponding to the number diagonals above or below the main diagonal to exclude or include. Default value is 0 if it's not specified.,output,T,Output tensor of the same type and shape as the input tensor.,upper,int (default is 1),Boolean. Indicates whether upper or lower part of matrix is retained. Default is true.,unknown
Unique,11,"Find the unique elements of a tensor. When an optional attribute 'axis' is provided, unique subtensors sliced along the 'axis' are returned.   Otherwise the input tensor is flattened and unique values of the flattened tensor are returned.   This operator returns the unique values or sliced unique subtensors of the input tensor and three optional outputs.   The first output tensor 'Y' contains all unique values or subtensors of the input.   The second optional output tensor 'indices' contains indices of 'Y' elements' first occurrence in 'X'.   The third optional output tensor 'inverse_indices' contains, for elements of 'X', its corresponding indices in 'Y'.   The fourth optional output tensor 'counts' contains the count of each element of 'Y' in the input.   Outputs are either sorted in ascending order or optionally in the order of the first occurrence of the values in the input.   https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html   Example 1:   ```   input_X = [2, 1, 1, 3, 4, 3]   attribute_sorted = 0   attribute_axis = None   output_Y = [2, 1, 3, 4]   output_indices = [0, 1, 3, 4]   output_inverse_indices = [0, 1, 1, 2, 3, 2]   output_counts = [1, 2, 2, 1]   ```   Example 2:   ```   input_X = [[1, 3], [2, 3]]   attribute_sorted = 1   attribute_axis = None   output_Y = [1, 2, 3]   output_indices = [0, 2, 1]   output_inverse_indices = [0, 2, 1, 2]   output_counts = [1, 1, 2]   ```   Example 3:   ```   input_X = [[1, 0, 0], [1, 0, 0], [2, 3, 4]]   attribute_sorted = 1   attribute_axis = 0   output_Y = [[1, 0, 0], [2, 3, 4]]   output_indices = [0, 2]   output_inverse_indices = [0, 0, 1]   output_counts = [2, 1]   ```   Example 4:   ```   input_x = [[[1., 1.], [0., 1.], [2., 1.], [0., 1.]],               [[1., 1.], [0., 1.], [2., 1.], [0., 1.]]]   attribute_sorted = 1   attribute_axis = 1   ```   intermediate data are presented below for better understanding:   there are 4 subtensors sliced along axis 1 of input_x (shape = (2, 4, 2)):   ```   A: [[1, 1], [1, 1]],      [[0, 1], [0, 1]],      [[2, 1], [2, 1]],      [[0, 1], [0, 1]].   ```   there are 3 unique subtensors:   ```   [[1, 1], [1, 1]],   [[0, 1], [0, 1]],   [[2, 1], [2, 1]].   ```   sorted unique subtensors:   ```   B: [[0, 1], [0, 1]],      [[1, 1], [1, 1]],      [[2, 1], [2, 1]].   ```   output_Y is constructed from B:   ```   [[[0. 1.], [1. 1.], [2. 1.]],    [[0. 1.], [1. 1.], [2. 1.]]]   ```   output_indices is to map from B to A:   ```   [1, 0, 2]   ```   output_inverse_indices is to map from A to B:   ```   [1, 0, 2, 0]   ```   output_counts:   ```   [2, 1, 1]   ```",X,T,A N-D input tensor that is to be processed.,"Y,indices,inverse_indices,counts","T,tensor(int64),tensor(int64),tensor(int64)","A tensor of the same type as 'X' containing all the unique values or subtensors sliced along a provided 'axis' in 'X', either sorted or maintained in the same order they occur in input 'X';A 1-D INT64 tensor containing indices of 'Y' elements' first occurrence in 'X'. When 'axis' is provided, it contains indices to subtensors in input 'X' on the 'axis'. When 'axis' is not provided, it contains indices to values in the flattened input tensor.;A 1-D INT64 tensor containing, for elements of 'X', its corresponding indices in 'Y'. When 'axis' is provided, it contains indices to subtensors in output 'Y' on the 'axis'. When 'axis' is not provided, it contains indices to values in output 'Y'.;A 1-D INT64 tensor containing the count of each element of 'Y' in input 'X'","axis,sorted","int,int (default is 1)","(Optional) The dimension to apply unique. If not specified, the unique elements of the flattened input are returned. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).;(Optional) Whether to sort the unique elements in ascending order before returning as output. Must be one of 0, or 1 (default).",unknown
Unsqueeze,"23, 1, 11, 13, 21","Insert single-dimensional entries to the shape of an input tensor (`data`).   Takes one required input `axes` - which contains a list of dimension indices and this operator will insert a dimension of value `1` into the corresponding index of the output tensor (`expanded`).   For example, given an input tensor (`data`) of shape [3, 4, 5], then   Unsqueeze(data, axes=[0, 4]) outputs a tensor (`expanded`) containing same data as `data` but with shape [1, 3, 4, 5, 1].   The input `axes` should not contain any duplicate entries. It is an error if it contains duplicates.   The rank of the output tensor (`output_rank`) is the rank of the input tensor (`data`) plus the number of values in `axes`.   Each value in `axes` should be within the (inclusive) range [-output_rank , output_rank - 1].   The order of values in `axes` does not matter and can come in any order.","data,axes","T,tensor(int64)","Original tensor;List of integers indicating the dimensions to be inserted. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(expanded).",expanded,T,Reshaped tensor with same data as input.,,,,mem
Upsample,"7, 9",Upsample the input tensor.   Each dimension value of the output tensor is:     output_dimension = floor(input_dimension * scale).,,,,,,,,,,unknown
Where,"16, 9","Return elements, either from X or Y, depending on condition.   Where behaves like   [numpy.where](https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html)   with three parameters.   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","condition,X,Y","B,T,T","When True (nonzero), yield X, otherwise yield Y;values selected at indices where condition is True;values selected at indices where condition is False",output,T,"Tensor of shape equal to the broadcasted shape of condition, X, and Y.",,,,unknown
Xor,"7, 1","Returns the tensor resulted from performing the `xor` logical operation   elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).","A,B","T,T",First input operand for the logical operator.;Second input operand for the logical operator.,C,T1,Result tensor.,,,,vector
